
/*----------------------------------------------------------------------------*
 * No Warranty                                                                *
 * Except as may be otherwise agreed to in writing, no warranties of any      *
 * kind, whether express or implied, are given by MTK with respect to any MTK *
 * Deliverables or any use thereof, and MTK Deliverables are provided on an   *
 * "AS IS" basis.  MTK hereby expressly disclaims all such warranties,        *
 * including any implied warranties of merchantability, non-infringement and  *
 * fitness for a particular purpose and any warranties arising out of course  *
 * of performance, course of dealing or usage of trade.  Parties further      *
 * acknowledge that Company may, either presently and/or in the future,       *
 * instruct MTK to assist it in the development and the implementation, in    *
 * accordance with Company's designs, of certain softwares relating to        *
 * Company's product(s) (the "Services").  Except as may be otherwise agreed  *
 * to in writing, no warranties of any kind, whether express or implied, are  *
 * given by MTK with respect to the Services provided, and the Services are   *
 * provided on an "AS IS" basis.  Company further acknowledges that the       *
 * Services may contain errors, that testing is important and Company is      *
 * solely responsible for fully testing the Services and/or derivatives       *
 * thereof before they are used, sublicensed or distributed.  Should there be *
 * any third party action brought against MTK, arising out of or relating to  *
 * the Services, Company agree to fully indemnify and hold MTK harmless.      *
 * If the parties mutually agree to enter into or continue a business         *
 * relationship or other arrangement, the terms and conditions set forth      *
 * hereunder shall remain effective and, unless explicitly stated otherwise,  *
 * shall prevail in the event of a conflict in the terms in any agreements    *
 * entered into between the parties.                                          *
 *---------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
 * Copyright(c) 2005, MediaTek, Inc.
 * All rights reserved.
 *
 * Unauthorized use, practice, perform, copy, distribution, reproduction,
 * or disclosure of this information in whole or in part is prohibited.
 *-----------------------------------------------------------------------------
 * $Author: p4admin $
 * $Date: 2015/02/15 $
 * $RCSfile: vdec_vp6.h,v $
 * $Revision: #1 $
 *---------------------------------------------------------------------------*/

/** @file vdec_vp6.h
 *  This header file declares exported APIs of MPV.
 */

#ifndef VDEC_VP6_TABLE_H
#define VDEC_VP6_TABLE_H


//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------

typedef struct
{
	S32 Row;
	S32 Col;
}__tblocks;

const __tblocks NearMacroBlocks[12] = 
{
	{ -1,  0 },
    {  0, -1 },
	{ -1, -1 },
	{ -1,  1 },
	{ -2,  0 },
    {  0, -2 },
	{ -1, -2 },
	{ -2, -1 },
	{ -2,  1 },
	{ -1,  2 },
	{ -2, -2 },
	{ -2,  2 }
};

// Default scan bands
const U8 DefaultScanBands[BLOCK_SIZE] = 
{
   0, 0, 1, 1, 1, 2, 2, 2, 
   2, 2, 2, 3, 3, 4, 4, 4, 
   5, 5, 5, 5, 6, 6, 7, 7, 
   7, 7, 7, 8, 8, 9, 9, 9, 
   9, 9, 9,10,10,11,11,11,
  11,11,11,12,12,12,12,12,
  12,13,13,13,13,13,14,14,
  14,14,15,15,15,15,15,15
};

/*
// Definition of AC coefficient banding
const S32 VP6_CoeffToBand[65] = 
{  
   -1,0,1,1,1,2,2,2,
	2,2,2,3,3,3,3,3,
	3,3,3,3,3,3,4,4,
	4,4,4,4,4,4,4,4,
	4,4,4,4,4,5,5,5,
	5,5,5,5,5,5,5,5,
	5,5,5,5,5,5,5,5,
	5,5,5,5,5,5,5,5,7
};
*/
// AWG Should export this in decodembs.h rather than pbdll.h
const int VP6_Mode2Frame[] =
{
	1,	// CODE_INTER_NO_MV		0 => Encoded diff from same MB last frame 
	0,	// CODE_INTRA			1 => DCT Encoded Block
	1,	// CODE_INTER_PLUS_MV	2 => Encoded diff from included MV MB last frame
	1,	// CODE_INTER_LAST_MV	3 => Encoded diff from MRU MV MB last frame
	1,	// CODE_INTER_PRIOR_MV	4 => Encoded diff from included 4 separate MV blocks
	2,	// CODE_USING_GOLDEN	5 => Encoded diff from same MB golden frame
	2,	// CODE_GOLDEN_MV		6 => Encoded diff from included MV MB golden frame
	1,  // CODE_INTER_FOUR_MV	7 => Encoded diff from included 4 separate MV blocks
	2,	// CODE_GOLD_NEAREST_MV 8 => Encoded diff from MRU MV MB last frame
	2,	// CODE_GOLD_NEAR_MV	9 => Encoded diff from included 4 separate MV blocks
};


const S32 BilinearFilters[8][2] =
{
    { 128,   0 },
    { 112,  16 },
    {  96,  32 },
    {  80,  48 },
    {  64,  64 },
    {  48,  80 },
    {  32,  96 },
    {  16, 112 }
};
// VP6.2 Bicubic filter taps calculated for 32 values of 'A' from -0.25 to -1.00 in steps of -0.05
// For each 'A' there are 8 sets of data corresponding to 1/8 pel offsets 0 to 7/8.
// These are only used in VP6.2 and upwards
// The last entry is a dummy entry used for backwards compatibility with VP61
//const 

const S32 BicubicFilterSet[17][8][4] = 
{
    {   { 0, 128, 0, 0 },
        { -3, 122, 9, 0 },
        { -4, 109, 24, -1 },
        { -5, 91, 45, -3 },
        { -4, 68, 68, -4 },
        { -3, 45, 91, -5 },
        { -1, 24, 109, -4 },
        { 0, 9, 122, -3 },
    },
    {   { 0, 128, 0, 0 },
        { -4, 124, 9, -1 },
        { -5, 110, 25, -2 },
        { -6, 91, 46, -3 },
        { -5, 69, 69, -5 },
        { -3, 46, 91, -6 },
        { -2, 25, 110, -5 },
        { -1, 9, 124, -4 },
    },
    {   { 0, 128, 0, 0 },
        { -4, 123, 10, -1 },
        { -6, 110, 26, -2 },
        { -7, 92, 47, -4 },
        { -6, 70, 70, -6 },
        { -4, 47, 92, -7 },
        { -2, 26, 110, -6 },
        { -1, 10, 123, -4 },
    },
    {   { 0, 128, 0, 0 },			// Approx A=-0.4
        { -5, 124, 10, -1 },
        { -7, 110, 27, -2 },
        { -7, 91, 48, -4 },
        { -6, 70, 70, -6 },
        { -4, 48, 92, -8 },
        { -2, 27, 110, -7 },
        { -1, 10, 124, -5 },
    },
    {   { 0, 128, 0, 0 },
        { -6, 124, 11, -1 },
        { -8, 111, 28, -3 },
        { -8, 92, 49, -5 },
        { -7, 71, 71, -7 },
        { -5, 49, 92, -8 },
        { -3, 28, 111, -8 },
        { -1, 11, 124, -6 },
    },
    {   { 0, 128, 0, 0 },			// Corresponds approximately to VDub bicubic A=-0.50
        { -6, 123, 12, -1 },
        { -9, 111, 29, -3 },
        { -9, 93, 50, -6 },
        { -8, 72, 72, -8 },
        { -6, 50, 93, -9 },
        { -3, 29, 111, -9 },
        { -1, 12, 123, -6 },
    },
    {   { 0, 128, 0, 0 },
        { -7, 124, 12, -1 },
        { -10, 111, 30, -3 },
        { -10, 93, 51, -6 },
        { -9, 73, 73, -9 },
        { -6, 51, 93, -10 },
        { -3, 30, 111, -10 },
        { -1, 12, 124, -7 },
    },
    {   { 0, 128, 0, 0 },
        { -7, 123, 13, -1 },
        { -11, 112, 31, -4 },
        { -11, 94, 52, -7 },
        { -10, 74, 74, -10 },
        { -7, 52, 94, -11 },
        { -4, 31, 112, -11 },
        { -1, 13, 123, -7 },
    },
    {   { 0, 128, 0, 0 },
        { -8, 124, 13, -1 },
        { -12, 112, 32, -4 },
        { -12, 94, 53, -7 },
        { -10, 74, 74, -10 },
        { -7, 53, 94, -12 },
        { -4, 32, 112, -12 },
        { -1, 13, 124, -8 },
    },
    {   { 0, 128, 0, 0 },
        { -9, 124, 14, -1 },
        { -13, 112, 33, -4 },
        { -13, 95, 54, -8 },
        { -11, 75, 75, -11 },
        { -8, 54, 95, -13 },
        { -4, 33, 112, -13 },
        { -1, 14, 124, -9 },
    },
    {   { 0, 128, 0, 0 },			// Corresponds approximately to VDub bicubic A=-0.75
        { -9, 123, 15, -1 },
        { -14, 113, 34, -5 },
        { -14, 95, 55, -8 },
        { -12, 76, 76, -12 },
        { -8, 55, 95, -14 },
        { -5, 34, 112, -13 },
        { -1, 15, 123, -9 },
    },
    {   { 0, 128, 0, 0 },
        { -10, 124, 15, -1 },
        { -14, 113, 34, -5 },
        { -15, 96, 56, -9 },
        { -13, 77, 77, -13 },
        { -9, 56, 96, -15 },
        { -5, 34, 113, -14 },
        { -1, 15, 124, -10 },
    },
    {   { 0, 128, 0, 0 },
        { -10, 123, 16, -1 },
        { -15, 113, 35, -5 },
        { -16, 98, 56, -10 },
        { -14, 78, 78, -14 },
        { -10, 56, 98, -16 },
        { -5, 35, 113, -15 },
        { -1, 16, 123, -10 },
    },
    {   { 0, 128, 0, 0 },
        { -11, 124, 17, -2 },
        { -16, 113, 36, -5 },
        { -17, 98, 57, -10 },
        { -14, 78, 78, -14 },
        { -10, 57, 98, -17 },
        { -5, 36, 113, -16 },
        { -2, 17, 124, -11 },
    },
    {   { 0, 128, 0, 0 },
        { -12, 125, 17, -2 },
        { -17, 114, 37, -6 },
        { -18, 99, 58, -11 },
        { -15, 79, 79, -15 },
        { -11, 58, 99, -18 },
        { -6, 37, 114, -17 },
        { -2, 17, 125, -12 },
    },
    {   { 0, 128, 0, 0 },
        { -12, 124, 18, -2 },
        { -18, 114, 38, -6 },
        { -19, 99, 59, -11 },
        { -16, 80, 80, -16 },
        { -11, 59, 99, -19 },
        { -6, 38, 114, -18 },
        { -2, 18, 124, -12 },
    },

	// Dummy entry for backwards VP61 compatibility
	{
		{  0, 128,   0,  0 },
		{ -4, 118,  16, -2 },
		{ -7, 106,  34, -5 },
		{ -8,  90,  53, -7 },
		{ -8,  72,  72, -8 },
		{ -7,  53,  90, -8 },
		{ -5,  34, 106, -7 },
		{ -2,  16, 118, -4 }
	}
};

// DC Quantizer tables
const Q_LIST_ENTRY VP6_DcQuant[ Q_TABLE_SIZE ] = 
{
	47, 47, 47, 47, 45, 43, 43, 43, 
	43, 43,	42, 41, 41, 40, 40, 40, 
	40, 35,	35, 35, 35, 33, 33, 33, 
	33, 32, 32, 32, 27, 27, 26, 26,
	25, 25, 24, 24, 23, 23,	19, 19,
    19, 19, 18, 18, 17, 16, 16, 16, 
    16, 16, 15, 11, 11, 11, 10, 10,
     9,  8,  7,  5,  3,  3,  2,  2    
};

const Q_LIST_ENTRY VP6_UvDcQuant[ Q_TABLE_SIZE ] = 
{
	47, 47, 47, 47, 45, 43, 43, 43, 
	43, 43,	42, 41, 41, 40, 40, 40, 
	40, 35,	35, 35, 35, 33, 33, 33, 
	33,	32, 32, 32, 27, 27, 26, 26,
	25, 25, 24, 24, 23, 23,	19, 19,
    19, 19, 18, 18, 17, 16, 16, 16,
    16, 16, 15, 11, 11, 11, 10, 10,
     9,  8,  7,  5,  3,  3,  2,  2    
};

const U8 VP6_QTableSelect[6] = { 0,0,0,0,1,1 };	// Controls selection of Q Table,rounding,zero bin etc for Y, U & V blocks


// AC Quantizer Tables
static const U32 VP6_QThreshTable[Q_TABLE_SIZE] = 
{   94, 92, 90, 88, 86, 82, 78, 74,
    70, 66, 62, 58, 54, 53, 52, 51,
	50, 49, 48, 47, 46, 45, 44, 43,
	42,	40, 39, 37, 36, 35, 34, 33,
    32, 31, 30, 29, 28, 27, 26, 25, 
    24, 23, 22, 21, 20, 19, 18, 17,
    16, 15, 14, 13, 12, 11, 10,  9,  
    8,   7,  6,  5,  4,  3,  2,  1
};

static const U32 VP6_UvQThreshTable[Q_TABLE_SIZE] = 
{   94, 92, 90, 88, 86, 82, 78, 74,
    70, 66, 62, 58, 54, 53, 52, 51,
	50, 49, 48, 47, 46, 45, 44, 43,
	42,	40, 39, 37, 36, 35, 34, 33,
    32, 31, 30, 29, 28, 27, 26, 25, 
    24, 23, 22, 21, 20, 19, 18, 17,
    16, 15, 14, 13, 12, 11, 10,  9,  
    8,   7,  6,  5,  4,  3,  2,  1
};

static const U8 KQuantIndex[63]=
{
    0x01,0x05,0x06,0x0e,0x0f,0x1b,0x1c,
    0x02,0x04,0x07,0x0d,0x10,0x1a,0x1d,0x2a,
    0x03,0x08,0x0c,0x11,0x19,0x1e,0x29,0x2b,
    0x09,0x0b,0x12,0x18,0x1f,0x28,0x2c,0x35,
    0x0a,0x13,0x17,0x20,0x27,0x2d,0x34,0x36,
    0x14,0x16,0x21,0x26,0x2e,0x33,0x37,0x3c,
    0x15,0x22,0x25,0x2f,0x32,0x38,0x3b,0x3d,
    0x23,0x24,0x30,0x31,0x39,0x3a,0x3e,0x3f
};

extern const unsigned char VP6_LoopFilterLimitValues[64] = 
{ 
	10, 10, 9,  9,  8,  8,  7,  7, 
	7,  7,  6,  6,  6,  6,  6,  6,
	6,  6,  6,  6,  6,  6,  6,  6,
	6,  6,  6,  6,  6,  6,  6,  6,  
	6,  6,  6,  6,  5,  5,  5,  5,	
	5,  5,  4,  4,  4,  4,  4,  4,	
	3,  3,  3,  3,  2,  2,  2,  2,  
	2,  2,  2,  1,  1,  1,  1,  0 
};


extern const signed char VP6_LoopFilterBoundTable[11][64] = 
 {
	{4, -1, -2, -1, 0, 1, 2, 1},
	{6, -1, -2, -3, -2, -1, 0, 1, 2, 3, 2, 1},
	{8, -1, -2, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1},
	{10, -1, -2, -3, -4, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1},
	{12, -1, -2, -3, -4, -5, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1},
	{14, -1, -2, -3, -4, -5, -6, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1},
	{16, -1, -2, -3, -4, -5, -6, -7, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1},
	{20, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
	{24, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
	{26, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
	{28, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
};
											
											
//
// Range to shift conversion table
//
extern const unsigned char KRangeToShiftTable[]=
{
	0,					// Invalid (should never be used).
	7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
};

const U8 VP6_BaselineXmittedProbs[4][2][10] =
{
 {{42,  2,  7, 42, 22,  3,  2,  5,  1,  0 },  { 69,  1,  1, 44,  6,  1,  0,  1,  0,  0}},
 {{ 8,  1,  8,  0,  0,  2,  1,  0,  1,  0 },  {229,  1,  0,  0,  0,  1,  0,  0,  1,  0}},
 {{35,  1,  6, 34,  0,  2,  1,  1,  1,  0 },  {122,  1,  1, 46,  0,  1,  0,  0,  1,  0}},
 {{64,  0, 64, 64, 64,  0,  0,  0,  0,  0 },  { 64,  0, 64, 64, 64,  0,  0,  0,  0,  0}},
};

const S8 VP6_CoeffToBand[65] =
{
  -1,0,1,1,1,2,2,2,
  2,2,2,3,3,3,3,3,
  3,3,3,3,3,3,4,4,
  4,4,4,4,4,4,4,4,
  4,4,4,4,4,5,5,5,
  5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,7
};

static const S8 VP6_CoeffToHuffBand[65] =
{
  -1,0,1,1,1,2,2,2,
  2,2,2,3,3,3,3,3,
  3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3
};

static const U8 DefaultMvLongProbs[2][LONG_MV_BITS] =  
{ 
    { 247, 210, 135,  68, 138, 220, 239, 246 }, 
    { 244, 184, 201,  44, 173, 221, 239, 253 } 
};

static const U8 DefaultSignProbs[2]    = { 128, 128 };

static const U8 DefaultMvShortProbs[2][7] = 
{ 
    { 225, 146, 172, 147, 214,  39, 156 }, 
    { 204, 170, 119, 235, 140, 230, 228 }
};

static const U8 DefaultIsShortProbs[2] = { 162, 164 };

static const U8 VP6_AcUpdateProbs[PREC_CASES][2][VP6_AC_BANDS][MAX_ENTROPY_TOKENS-1] =
{
	{	// preceded by 0
		{
			{ 227, 246, 230, 247, 244, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 209, 231, 231, 249, 249, 253, 255, 255, 255 },
			{ 255, 255, 225, 242, 241, 251, 253, 255, 255, 255, 255 },
			{ 255, 255, 241, 253, 252, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 248, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
		{
			{ 240, 255, 248, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 240, 253, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
	},
	{	// preceded by 1
		{
			{ 206, 203, 227, 239, 247, 255, 253, 255, 255, 255, 255 },
			{ 207, 199, 220, 236, 243, 252, 252, 255, 255, 255, 255 },
			{ 212, 219, 230, 243, 244, 253, 252, 255, 255, 255, 255 },
			{ 236, 237, 247, 252, 253, 255, 255, 255, 255, 255, 255 },
			{ 240, 240, 248, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
		{
			{ 230, 233, 249, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 238, 238, 250, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 248, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
	},
	{	// preceded by > 1
		{
			{ 225, 239, 227, 231, 244, 253, 243, 255, 255, 253, 255 },
			{ 232, 234, 224, 228, 242, 249, 242, 252, 251, 251, 255 },
			{ 235, 249, 238, 240, 251, 255, 249, 255, 253, 253, 255 },
			{ 249, 253, 251, 250, 255, 255, 255, 255, 255, 255, 255 },
			{ 251, 250, 249, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
		{
			{ 243, 244, 250, 250, 255, 255, 255, 255, 255, 255, 255 },
			{ 249, 248, 250, 253, 255, 255, 255, 255, 255, 255, 255 },
			{ 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
			{ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 },
		},
	},
};

static const U8 ZrlUpdateProbs[ZRL_BANDS][ZERO_RUN_PROB_CASES] =
{
	{ 219, 246, 238, 249, 232, 239, 249, 255, 248, 253, 239, 244, 241, 248 }, 
	{ 198, 232, 251, 253, 219, 241, 253, 255, 248, 249, 244, 238, 251, 255 }, 
};


static const U8 ScanBandUpdateProbs[BLOCK_SIZE] = 
{  
	255, 132, 132, 159, 153, 151, 161, 170, 
	164, 162, 136, 110, 103, 114, 129, 118, 
	124, 125, 132, 136, 114, 110, 142, 135, 
	134, 123, 143, 126, 153, 183, 166, 161, 
	171, 180, 179, 164, 203, 218, 225, 217, 
	215, 206, 203, 217, 229, 241, 248, 243,
	253, 255, 253, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255 
};


// Zero run probs 
static const U8 ZeroRunProbDefaults[ZRL_BANDS][ZERO_RUN_PROB_CASES] = 
{  
	{ 198, 197, 196, 146, 198, 204, 169, 142, 130, 136, 149, 149, 191, 249 },
	{ 135, 201, 181, 154,  98, 117, 132, 126, 146, 169, 184, 240, 246, 254 },
};


static const U8 VP6_DcUpdateProbs[2][MAX_ENTROPY_TOKENS-1] = 
{ 
	{ 146, 255, 181, 207, 232, 243, 238, 251, 244, 250, 249 },
	{ 179, 255, 214, 240, 250, 255, 244, 255, 255, 255, 255 }
};

//                  3          16           10*2
const U8 VP6_ModeVq[MODETYPES][MODEVECTORS][MAX_MODES*2] =
{
  { {  9, 15, 32, 25,  7, 19,  9, 21,  1, 12, 14, 12,  3, 18, 14, 23,  3, 10,  0,  4},
    { 48, 39,  1,  2, 11, 27, 29, 44,  7, 27,  1,  4,  0,  3,  1,  6,  1,  2,  0,  0},
    { 21, 32,  1,  2,  4, 10, 32, 43,  6, 23,  2,  3,  1, 19,  1,  6, 12, 21,  0,  7},
    { 69, 83,  0,  0,  0,  2, 10, 29,  3, 12,  0,  1,  0,  3,  0,  3,  2,  2,  0,  0},
    { 11, 20,  1,  4, 18, 36, 43, 48, 13, 35,  0,  2,  0,  5,  3, 12,  1,  2,  0,  0},
    { 70, 44,  0,  1,  2, 10, 37, 46,  8, 26,  0,  2,  0,  2,  0,  2,  0,  1,  0,  0},
    {  8, 15,  0,  1,  8, 21, 74, 53, 22, 42,  0,  1,  0,  2,  0,  3,  1,  2,  0,  0},
    {141, 42,  0,  0,  1,  4, 11, 24,  1, 11,  0,  1,  0,  1,  0,  2,  0,  0,  0,  0},
    {  8, 19,  4, 10, 24, 45, 21, 37,  9, 29,  0,  3,  1,  7, 11, 25,  0,  2,  0,  1},
    { 46, 42,  0,  1,  2, 10, 54, 51, 10, 30,  0,  2,  0,  2,  0,  1,  0,  1,  0,  0},
    { 28, 32,  0,  0,  3, 10, 75, 51, 14, 33,  0,  1,  0,  2,  0,  1,  1,  2,  0,  0},
    {100, 46,  0,  1,  3,  9, 21, 37,  5, 20,  0,  1,  0,  2,  1,  2,  0,  1,  0,  0},
    { 27, 29,  0,  1,  9, 25, 53, 51, 12, 34,  0,  1,  0,  3,  1,  5,  0,  2,  0,  0},
    { 80, 38,  0,  0,  1,  4, 69, 33,  5, 16,  0,  1,  0,  1,  0,  0,  0,  1,  0,  0},
    { 16, 20,  0,  0,  2,  8,104, 49, 15, 33,  0,  1,  0,  1,  0,  1,  1,  1,  0,  0},
    {194, 16,  0,  0,  1,  1,  1,  9,  1,  3,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0} },

  { { 41, 22,  1,  0,  1, 31,  0,  0,  0,  0,  0,  1,  1,  7,  0,  1, 98, 25,  4, 10},
    {123, 37,  6,  4,  1, 27,  0,  0,  0,  0,  5,  8,  1,  7,  0,  1, 12, 10,  0,  2},
    { 26, 14, 14, 12,  0, 24,  0,  0,  0,  0, 55, 17,  1,  9,  0, 36,  5,  7,  1,  3},
    {209,  5,  0,  0,  0, 27,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0},
    {  2,  5,  4,  5,  0,121,  0,  0,  0,  0,  0,  3,  2,  4,  1,  4,  2,  2,  0,  1},
    {175,  5,  0,  1,  0, 48,  0,  0,  0,  0,  0,  2,  0,  1,  0,  2,  0,  1,  0,  0},
    { 83,  5,  2,  3,  0,102,  0,  0,  0,  0,  1,  3,  0,  2,  0,  1,  0,  0,  0,  0},
    {233,  6,  0,  0,  0,  8,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  1,  0,  0},
    { 34, 16,112, 21,  1, 28,  0,  0,  0,  0,  6,  8,  1,  7,  0,  3,  2,  5,  0,  2},
    {159, 35,  2,  2,  0, 25,  0,  0,  0,  0,  3,  6,  0,  5,  0,  1,  4,  4,  0,  1},
    { 75, 39,  5,  7,  2, 48,  0,  0,  0,  0,  3, 11,  2, 16,  1,  4,  7, 10,  0,  2},
    {212, 21,  0,  1,  0,  9,  0,  0,  0,  0,  1,  2,  0,  2,  0,  0,  2,  2,  0,  0},
    {  4,  2,  0,  0,  0,172,  0,  0,  0,  0,  0,  1,  0,  2,  0,  0,  2,  0,  0,  0},
    {187, 22,  1,  1,  0, 17,  0,  0,  0,  0,  3,  6,  0,  4,  0,  1,  4,  4,  0,  1},
    {133,  6,  1,  2,  1, 70,  0,  0,  0,  0,  0,  2,  0,  4,  0,  3,  1,  1,  0,  0},
    {251,  1,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0} },

  { {  2,  3,  2,  3,  0,  2,  0,  2,  0,  0, 11,  4,  1,  4,  0,  2,  3,  2,  0,  4},
    { 49, 46,  3,  4,  7, 31, 42, 41,  0,  0,  2,  6,  1,  7,  1,  4,  2,  4,  0,  1},
    { 26, 25,  1,  1,  2, 10, 67, 39,  0,  0,  1,  1,  0, 14,  0,  2, 31, 26,  1,  6},
    {103, 46,  1,  2,  2, 10, 33, 42,  0,  0,  1,  4,  0,  3,  0,  1,  1,  3,  0,  0},
    { 14, 31,  9, 13, 14, 54, 22, 29,  0,  0,  2,  6,  4, 18,  6, 13,  1,  5,  0,  1},
    { 85, 39,  0,  0,  1,  9, 69, 40,  0,  0,  0,  1,  0,  3,  0,  1,  2,  3,  0,  0},
    { 31, 28,  0,  0,  3, 14,130, 34,  0,  0,  0,  1,  0,  3,  0,  1,  3,  3,  0,  1},
    {171, 25,  0,  0,  1,  5, 25, 21,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0},
    { 17, 21, 68, 29,  6, 15, 13, 22,  0,  0,  6, 12,  3, 14,  4, 10,  1,  7,  0,  3},
    { 51, 39,  0,  1,  2, 12, 91, 44,  0,  0,  0,  2,  0,  3,  0,  1,  2,  3,  0,  1},
    { 81, 25,  0,  0,  2,  9,106, 26,  0,  0,  0,  1,  0,  1,  0,  1,  1,  1,  0,  0},
    {140, 37,  0,  1,  1,  8, 24, 33,  0,  0,  1,  2,  0,  2,  0,  1,  1,  2,  0,  0},
    { 14, 23,  1,  3, 11, 53, 90, 31,  0,  0,  0,  3,  1,  5,  2,  6,  1,  2,  0,  0},
    {123, 29,  0,  0,  1,  7, 57, 30,  0,  0,  0,  1,  0,  1,  0,  1,  0,  1,  0,  0},
    { 13, 14,  0,  0,  4, 20,175, 20,  0,  0,  0,  1,  0,  1,  0,  1,  1,  1,  0,  0},
    {202, 23,  0,  0,  1,  3,  2,  9,  0,  0,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0} }
};

static const U8 VP6_MvUpdateProbs[]=
{
  237, 246, 231, 243,
  253, 253, 254, 254, 254, 254, 254,
  245, 253, 254, 254, 254, 254, 254,
  254, 254, 254, 254, 254, 250, 250, 252,
  254, 254, 254, 254, 254, 251, 251, 254
};

// Dc context equations: Dc Token contexts are 00 0!0 and !0!0
static const LINE_EQ VP6_DcNodeEqs[CONTEXT_NODES][DC_TOKEN_CONTEXTS] =
{
	{ { 122, 133 },{ 133,  51 },{ 142, -16 } },		// Zero Node	
	{ {   0,   1 },{   0,   1 },{   0,   1 } },		// EOB Node		Dummy as no EOBs in DC
	{ {  78, 171 },{ 169,  71 },{ 221, -30 } },		// One Node
	{ { 139, 117 },{ 214,  44 },{ 246,  -3 } },		// Low Val Node
	{ { 168,  79 },{ 210,  38 },{ 203,  17 } },		// Two Node (2 vs 3 or 4)
};


static const U8 KDcProbsIndex[]=
{
    DCProbOffset(0,0), DCProbOffset(0,1), DCProbOffset(0,2),
    DCProbOffset(0,3), DCProbOffset(0,4), DCProbOffset(0,5),
    DCProbOffset(0,6), DCProbOffset(0,7), DCProbOffset(0,8),
    DCProbOffset(0,9), DCProbOffset(0,10),
    DCProbOffset(1,0), DCProbOffset(1,1), DCProbOffset(1,2),
    DCProbOffset(1,3), DCProbOffset(1,4), DCProbOffset(1,5),
    DCProbOffset(1,6), DCProbOffset(1,7), DCProbOffset(1,8),
    DCProbOffset(1,9), DCProbOffset(1,10),
};

static const U16 KACProbIndex[]=
{
      0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
     11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
     33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
     44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
     55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
    198,199,200,201,202,203,204,205,206,207,208,
    209,210,211,212,213,214,215,216,217,218,219,
    220,221,222,223,224,225,226,227,228,229,230,
    231,232,233,234,235,236,237,238,239,240,241,
    242,243,244,245,246,247,248,249,250,251,252,
    253,254,255,256,257,258,259,260,261,262,263,
     66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
     77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
     88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
     99,100,101,102,103,104,105,106,107,108,109,
    110,111,112,113,114,115,116,117,118,119,120,
    121,122,123,124,125,126,127,128,129,130,131,
    264,265,266,267,268,269,270,271,272,273,274,
    275,276,277,278,279,280,281,282,283,284,285,
    286,287,288,289,290,291,292,293,294,295,296,
    297,298,299,300,301,302,303,304,305,306,307,
    308,309,310,311,312,313,314,315,316,317,318,
    319,320,321,322,323,324,325,326,327,328,329,
    132,133,134,135,136,137,138,139,140,141,142,
    143,144,145,146,147,148,149,150,151,152,153,
    154,155,156,157,158,159,160,161,162,163,164,
    165,166,167,168,169,170,171,172,173,174,175,
    176,177,178,179,180,181,182,183,184,185,186,
    187,188,189,190,191,192,193,194,195,196,197,
    330,331,332,333,334,335,336,337,338,339,340,
    341,342,343,344,345,346,347,348,349,350,351,
    352,353,354,355,356,357,358,359,360,361,362,
    363,364,365,366,367,368,369,370,371,372,373,
    374,375,376,377,378,379,380,381,382,383,384,
    385,386,387,388,389,390,391,392,393,394,395
};

// For Bitread functions
static const U32 loMaskTbl_VP60[] =
{
    0x00000000,
    0x00000001, 0x00000003, 0x00000007, 0x0000000F,
    0x0000001F, 0x0000003F, 0x0000007F, 0x000000FF,
    0x000001FF, 0x000003FF, 0x000007FF, 0x00000FFF,
    0x00001FFF, 0x00003FFF, 0x00007FFF, 0x0000FFFF,
    0x0001FFFF, 0x0003FFFF, 0x0007FFFF, 0x000FFFFF,
    0x001FFFFF, 0x003FFFFF, 0x007FFFFF, 0x00FFFFFF,
    0x01FFFFFF, 0x03FFFFFF, 0x07FFFFFF, 0x0FFFFFFF,
    0x1FFFFFFF, 0x3FFFFFFF, 0x7FFFFFFF, 0xFFFFFFFF
};

static const U32 VP6_HuffTokenMinVal[MAX_ENTROPY_TOKENS] = { 0,1, 2, 3, 4, 5, 7, 11, 19, 35, 67, 0};

static const TOKENEXTRABITS VP6_TokenExtraBits2[MAX_ENTROPY_TOKENS] =
{
    {  0,-1, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //ZERO_TOKEN
    {  1, 0, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //ONE_TOKEN
    {  2, 0, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //TWO_TOKEN
    {  3, 0, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //THREE_TOKEN
    {  4, 0, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //FOUR_TOKEN
    {  5, 0, { 159,0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //DCT_VAL_CATEGORY1
    {  7, 1, { 145,165,0,  0,  0,  0,  0,  0,  0,  0,  0   } },   //DCT_VAL_CATEGORY2
    { 11, 2, { 140,148,173,0,  0,  0,  0,  0,  0,  0,  0   } },   //DCT_VAL_CATEGORY3
    { 19, 3, { 135,140,155,176,0,  0,  0,  0,  0,  0,  0   } },   //DCT_VAL_CATEGORY4
    { 35, 4, { 130,134,141,157,180,0,  0,  0,  0,  0,  0   } },   //DCT_VAL_CATEGORY5
    { 67,10, { 129,130,133,140,153,177,196,230,243,254,254 } },   //DCT_VAL_CATEGORY6
    {  0,-1, { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   } },   // EOB TOKEN
};

const BOOL VP6_ModeUsesMC[MAX_MODES] = { FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE };

#endif

