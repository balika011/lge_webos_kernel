
/*----------------------------------------------------------------------------*
 * No Warranty                                                                *
 * Except as may be otherwise agreed to in writing, no warranties of any      *
 * kind, whether express or implied, are given by MTK with respect to any MTK *
 * Deliverables or any use thereof, and MTK Deliverables are provided on an   *
 * "AS IS" basis.  MTK hereby expressly disclaims all such warranties,        *
 * including any implied warranties of merchantability, non-infringement and  *
 * fitness for a particular purpose and any warranties arising out of course  *
 * of performance, course of dealing or usage of trade.  Parties further      *
 * acknowledge that Company may, either presently and/or in the future,       *
 * instruct MTK to assist it in the development and the implementation, in    *
 * accordance with Company's designs, of certain softwares relating to        *
 * Company's product(s) (the "Services").  Except as may be otherwise agreed  *
 * to in writing, no warranties of any kind, whether express or implied, are  *
 * given by MTK with respect to the Services provided, and the Services are   *
 * provided on an "AS IS" basis.  Company further acknowledges that the       *
 * Services may contain errors, that testing is important and Company is      *
 * solely responsible for fully testing the Services and/or derivatives       *
 * thereof before they are used, sublicensed or distributed.  Should there be *
 * any third party action brought against MTK, arising out of or relating to  *
 * the Services, Company agree to fully indemnify and hold MTK harmless.      *
 * If the parties mutually agree to enter into or continue a business         *
 * relationship or other arrangement, the terms and conditions set forth      *
 * hereunder shall remain effective and, unless explicitly stated otherwise,  *
 * shall prevail in the event of a conflict in the terms in any agreements    *
 * entered into between the parties.                                          *
 *---------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
 * Copyright(c) 2005, MediaTek, Inc.
 * All rights reserved.
 *
 * Unauthorized use, practice, perform, copy, distribution, reproduction,
 * or disclosure of this information in whole or in part is prohibited.
 *-----------------------------------------------------------------------------
 * $Author: p4admin $
 * $Date: 2015/02/15 $
 * $RCSfile: vdec_vp6.h,v $
 * $Revision: #1 $
 *---------------------------------------------------------------------------*/

/** @file vdec_vp6.h
 *  This header file declares exported APIs of MPV.
 */

#ifndef VDEC_VP6_UTIL_H
#define VDEC_VP6_UTIL_H


//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------

#include "x_lint.h"

LINT_EXT_HEADER_BEGIN
#include "x_os.h"
#include "x_assert.h"
#include "x_typedef.h"
#include "x_debug.h"
LINT_EXT_HEADER_END
#include "vdec_vp6com.h"
;

// DDR3 mode
//      Enable  -> VDEC_DDR3_SUPPORT, VP6_64X32_BLK_MODE
//      Disable -> VP6_GEN_CRC (because CRC golden is generated by 16x32 raw data)

// Deblock
//      Enable  -> VDEC_VP6_HWDEBLOCK
//      Disable -> VDEC_DDR3_SUPPORT, VP6_64X32_BLK_MODE (because deblock golden is generated by 16x32 raw data)

//#define CC_VP6_EMULATION
#define SUPPORT_DEC_ISR
#define WAIT_SRAM_STABLE
//#define VP6_MID_SUPPORT
//    #define VP6_MID_TEST_VIOLATION
#define VDEC_DDR3_SUPPORT
    //#define VDEC_FORCE_DDR3
#define VP6_64X32_BLK_MODE
//#define VDEC_VP6_HWDEBLOCK
//#define VP6_ENABLE_ERROR_CONCEALMENT

#ifdef CC_DYNAMIC_POWER_ONOFF
    #define VP6_ENABLE_POWER_DOWN
#endif

#ifdef __MODEL_slt__
    #undef VDEC_DDR3_SUPPORT
    #undef VP6_64X32_BLK_MODE
#endif

#define VP6_GEN_CRC
#ifdef VP6_64X32_BLK_MODE
    #undef VP6_GEN_CRC
#endif

// Workaround
#define VP6_DEC_MODE_OPEN_SRC   0
#define VP6_DEC_MODE_ADOBE      1
#define VP6_DEC_MODE            VP6_DEC_MODE_ADOBE

//#define VP6_BOOL_CODER_TEST
//#define VP6_CONTEXT_ADDR_TEST
//#define ERROR_TYPE_TEST
//#define ERROR_STRESS_TEST
//#define VP6_DRAM_BUSY_TEST

#define VP6_SUPPORT_MULTIINSTANCE
// hw related definitions
#define WAIT_THRD 0x1000

#define VDEC_VP6WAIT_TIME (1500)
#define VDEC_VP6DEF_FRAME_RATE (30000)
#define VDEC_VP6_FB_NS 4
#define STRIDE_EXTRA (96)
#define UMV_BORDER   (48)
#define VDEC_VP6_WAIT_DISP_TIME 1500
#define VDEC_VP6_MAX_FPS 30

#define VP6_IFRAME 0
#define VP6_PFRAME 1
#define IPBMode 0x0
#define IPMode  0x1
#define IMode   0x2
#define VP6_FRM_TYPE 3

#define VP6_CLRFLG(flg,index) (flg &= ~(1<<(index)))
#define VP6_SETFLG(flg,index) (flg |= (1<<(index)))
#define VP6_ISSET(flg,index)  (flg&(1<<(index)))
#define VP6_SETFLGV(flg,index,value) ((value) ? VP6_SETFLG(flg,index) : VP6_CLRFLG(flg,index))

#ifdef VP6_USE_HW_DECODER
#define FRM_PIC     0

#define VP6_I_FRM   0
#define VP6_P_FRM   1

typedef enum
{
    VP6_PROFILE_SIMPLE = 0,
    VP6_PROFILE_UNDEF_1,   
    VP6_PROFILE_UNDEF_2,
    VP6_PROFILE_ADVANCED
}VP6_PROFILE_T;

#define DEC_RETRY_NUM 8000

#ifdef VDEC_DDR3_SUPPORT
    #ifndef VP6_64X32_BLK_MODE
    #define VP6_64X32_BLK_MODE
    #endif
#endif

    #ifdef VDEC_VP6_HWDEBLOCK
#undef VP6_64X32_BLK_MODE
#define VDEC_PP_ENABLE TRUE
    #else
#define VDEC_PP_ENABLE FALSE    
    #endif

#endif

typedef struct _HUFF_NODE
{
    UINT16 left;    // 1 bit tells whether its a pointer or value
    UINT16 right;   // 1 bit tells whether its a pointer or value
} HUFF_NODE;

typedef struct _HUFF_CODE
{
    UINT16 hcode;
    UINT16 len;
} HUFF_CODE;

typedef struct _SORTNODE
{
    INT32 next;
    INT32 freq;
    UINT16 value;
} SORTNODE;

typedef enum
{
    VP6_DEC_FLG_UNSUPPORT=0,
    VP6_DEC_FLG_INITED,
    //VP6_DEC_FLG_ENDCALPTS,
    //VP6_DEC_FLG_DECERROR,
    VP6_DEC_FLG_VALIDPTS,
    VP6_DEC_FLG_BSPWKBUF,
    VP6_DEC_FLG_SUPPORT_MULTI,
    VP6_DEC_FLG_SUPPORT_ALPHA,
    VP6_DEC_FLG_POLLING,
    VP6_DEC_FLG_FINISH_PARAM,
    //VP6_DEC_FLG_NEWGD,
    VP6_DEC_FLG_RESETSRAM,
    VP6_DEC_FLG_LOCKED
}VP6_DEC_FLAG;

typedef enum
{
    VP6_START_FROM_TYPE,
    VP6_START_FROM_PAD,
    VP6_START_FROM_DATA
}VP6_FRAME_START_POS;

typedef struct
{
    BOOL  fgRefreshGd;
    BOOL  fgKeyFrame;
    BOOL  fgLastKeyFrame;
    BOOL  fgInitedDec;
    UINT32 u4WPtr;
    UCHAR ucFbgId;
    UCHAR ucFbgType;
    //UCHAR ucSyncMode;
    //UCHAR ucSkipMode;
    UCHAR ucCurFbId;
    UCHAR ucLastFbId;
    UCHAR ucDbkFbId;
    UCHAR ucGoldenFbId;
    UINT16 u2NewWidth;
    UINT16 u2NewHeight;
    UINT16 u2Width;
    UINT16 u2Height;
    UINT32 u4ReadPtr;
    UINT32 u4LastReadPtr;
    UINT32 u4DispPts;
    UINT32 u4Rate;
    UINT32 u4FrameCounter;
    UINT32 u4FbmLineSize;
    //UINT32 u4DataOffset;
    UINT32 u4WorkBuf;
    UINT32 u4RefPts;
    UINT32 u4DeltaPTS;
    INT32  i4DecRet;
    UINT32 u4DecErrType;
    UINT64 u8RefPts;
    UINT32 u8DispPts;
    UINT64 u8Offset;

#ifdef VDEC_TIME_PROFILE
    UINT8 u1DramMoniter;
    UINT32 u4CurDecMs;
    UINT32 u4CurDecCycle;
    UINT32 u4CurDramCycle;
    UINT32 u4CurRstMs;
    UINT32 u4CurSwMicro;
    UINT32 u4CurWaitFbMicro;
#endif

#ifdef VP6_USE_SW_DECODER
    #ifdef VP6_USE_IMGRZ
    UCHAR ucDecFbId1;
    UCHAR ucDecFbId2;
    UCHAR ucDecFbId3;
    RZ_JPG_SCL_PARAM_SET_T rImgrzParam;
    #endif
#endif

    UINT32 u4DecReadBytes;
    UINT32 u4DecReadBits;
    
    // for alpha
    UINT8 u1AlphaFlag;
    UINT32 au4VldWrapper[580];//196
    UINT32 au4Reorder[16];
}VP6_DEC_PARAM_T;

typedef struct _VDEC_INFO_VP6_FRM_HDR_T_
{
    // frame coding type: I_TYPE, P_TYPE
    UCHAR  ucFrameType;
    // Quantizer setting
    UCHAR  ucDctQMask;
    
    // 0: for one partition, 1 for two partitions
    BOOL    fgMultiStream;
    //0 for BoolCoder, 1 for HuffmanCoder for 2nd data patition.
    BOOL    fgUseHuffman;
    //Version of encoder used to encode frame.
    UCHAR  ucVp3VerNo;
    // 0 for Simple, 3 for Advanced. (1 and 2 undefined)
    VP6_PROFILE_T  ucVpProfile;
    // Reserved.
    UCHAR    ucReserved;
    //Offset to 2nd partion
    UINT16  u2Buff2Offset;
    // Number of rows of 8x8 blocks in unscaled frame.
    UINT16  u2VFragments;
    // Number of cols of 8x8 blocks in unscaled frame.
    UINT16  u2HFragments;
    // Number of rows of 8x8 blocks in scaled frame.
    UINT16  u2OutVFragments;
    // Number of cols of 8x8 blocks in scaled frame.
    UINT16  u2OutHFragments;

    
    // Mode to use for scaling frame.
    UCHAR  ucScalingMode;
    // Advanced Profile Only:
    // 0 Prediction filter type is fixed and specified.
    // 1 Auto-select bi-cubic or bi-linear prediction filter.
    BOOL     fgAutoSelectPMFlag;
    //If Auto-SelectPMFlag == 1 only, threshold on prediction filter variance size.
    UINT32   u4PredictionFilterVarThresh;
    //If Auto-SelectPMFlag == 1 only, threshold on MV size.
    UINT32   u4PredictionFilterMvSizeThresh;
    // If Auto-SelectPMFlag == 0 only, threshold on MV size.
    // 0 use Bi-linear filter.
    // 1 use Bi-cubic filter.
    BOOL      fgBiCubicOrBiLinearFlag;
    // Vp3VerNo == 8 Only, Selector to choose bi-cubic filter coefficients
    UCHAR    ucPreditionFilterAlpha;

    // Inter Frame Header
    // 0: Do not update the Golden Frame with this frame, 1: Decoded frame should become new Golden Frame.
    BOOL      fgRefreshGoldenFrame;
    // Advanced Profile Only: 
    //0: Disable the loop filter, 1: Enable.
    UINT16      u2LoopFilter;
    // Advanced Profile Only:
    // 0: Basic loop filter, 1: De-ringing loop filter.
    BOOL      fgLoopFilterSelector;    

    BOOL      fgParse_Filter_Info;
    UCHAR    ucVrt_Shift;   
    UCHAR    ucFilter_Mode;
    UINT32    u4Sample_Variance_Threshold;
    UINT32    u4Max_Vector_Length;
    UINT32    u4Filter_Selection;

    //HW related
    UINT16    u2Vp56_Filter_Threshold;
    UINT32    u4DQuant_Dc;
    UINT32    u4DQuant_Ac;
    UINT16    u2WidthDec;
    UINT16    u2HeightDec;
    UINT32    u4Mv_Thr_En;
    UINT32    u4Var_Thr_En;
    UINT32    u4BilinearFilter;
    UINT32    u4FrameSize;
    //~HW related
} VDEC_INFO_VP6_FRM_HDR_T;

typedef struct _VDEC_INFO_VP6_PP_INFO_T_
{
    BOOL     fgPpEnable;
    UINT32  u4PpYBufSa;
    UINT32  u4PpCBufSa;
}VDEC_INFO_VP6_PP_INFO_T;

typedef struct _VDEC_INFO_DEC_PRM_T_
{
    UINT32  u4Flag;
    UINT32  u4AddrMode;
    BOOL    fgAdobeMode;

#ifdef VP6_GEN_CRC
    UINT32  u4CrcVal[2][4];
#endif

#ifdef VP6_USE_SW_DECODER
    BOOL  fgSwdecoder;
#endif



    UCHAR   ucPicStruct;
    UCHAR   ucPicType;
    UCHAR   ucDecFBufIdx;
    UINT32  u4PicBW;
    UINT32  u4PicW;
    UINT32  u4PicH;
}VDEC_INFO_DEC_PRM_T;

#define MAX_STRM_NS 2

typedef struct
{
    VDEC_PES_INFO_T rPesInfo;
    VP6_DEC_PARAM_T rDecParam[MAX_STRM_NS];
    HANDLE_T hVdecVP6FinSema;
#ifdef VP6_USE_HW_DECODER
    VDEC_INFO_VP6_FRM_HDR_T rFrmHdr[MAX_STRM_NS];
    VDEC_INFO_VP6_PP_INFO_T rPpInfo;
    VDEC_INFO_DEC_PRM_T rDecParamEx;
#endif
    UINT8 uEsId;
    UINT8 u1StrmId;

#ifdef VP6_USE_SW_DECODER
    UINT32 u4DecInstance;
#endif
}VDEC_VP6_INFO_T;

#endif
