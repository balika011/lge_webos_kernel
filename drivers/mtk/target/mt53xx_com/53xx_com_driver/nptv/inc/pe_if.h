/*----------------------------------------------------------------------------*
 * Copyright Statement:                                                       *
 *                                                                            *
 *   This software/firmware and related documentation ("MediaTek Software")   *
 * are protected under international and related jurisdictions'copyright laws *
 * as unpublished works. The information contained herein is confidential and *
 * proprietary to MediaTek Inc. Without the prior written permission of       *
 * MediaTek Inc., any reproduction, modification, use or disclosure of        *
 * MediaTek Software, and information contained herein, in whole or in part,  *
 * shall be strictly prohibited.                                              *
 * MediaTek Inc. Copyright (C) 2010. All rights reserved.                     *
 *                                                                            *
 *   BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND     *
 * AGREES TO THE FOLLOWING:                                                   *
 *                                                                            *
 *   1)Any and all intellectual property rights (including without            *
 * limitation, patent, copyright, and trade secrets) in and to this           *
 * Software/firmware and related documentation ("MediaTek Software") shall    *
 * remain the exclusive property of MediaTek Inc. Any and all intellectual    *
 * property rights (including without limitation, patent, copyright, and      *
 * trade secrets) in and to any modifications and derivatives to MediaTek     *
 * Software, whoever made, shall also remain the exclusive property of        *
 * MediaTek Inc.  Nothing herein shall be construed as any transfer of any    *
 * title to any intellectual property right in MediaTek Software to Receiver. *
 *                                                                            *
 *   2)This MediaTek Software Receiver received from MediaTek Inc. and/or its *
 * representatives is provided to Receiver on an "AS IS" basis only.          *
 * MediaTek Inc. expressly disclaims all warranties, expressed or implied,    *
 * including but not limited to any implied warranties of merchantability,    *
 * non-infringement and fitness for a particular purpose and any warranties   *
 * arising out of course of performance, course of dealing or usage of trade. *
 * MediaTek Inc. does not provide any warranty whatsoever with respect to the *
 * software of any third party which may be used by, incorporated in, or      *
 * supplied with the MediaTek Software, and Receiver agrees to look only to   *
 * such third parties for any warranty claim relating thereto.  Receiver      *
 * expressly acknowledges that it is Receiver's sole responsibility to obtain *
 * from any third party all proper licenses contained in or delivered with    *
 * MediaTek Software.  MediaTek is not responsible for any MediaTek Software  *
 * releases made to Receiver's specifications or to conform to a particular   *
 * standard or open forum.                                                    *
 *                                                                            *
 *   3)Receiver further acknowledge that Receiver may, either presently       *
 * and/or in the future, instruct MediaTek Inc. to assist it in the           *
 * development and the implementation, in accordance with Receiver's designs, *
 * of certain softwares relating to Receiver's product(s) (the "Services").   *
 * Except as may be otherwise agreed to in writing, no warranties of any      *
 * kind, whether express or implied, are given by MediaTek Inc. with respect  *
 * to the Services provided, and the Services are provided on an "AS IS"      *
 * basis. Receiver further acknowledges that the Services may contain errors  *
 * that testing is important and it is solely responsible for fully testing   *
 * the Services and/or derivatives thereof before they are used, sublicensed  *
 * or distributed. Should there be any third party action brought against     *
 * MediaTek Inc. arising out of or relating to the Services, Receiver agree   *
 * to fully indemnify and hold MediaTek Inc. harmless.  If the parties        *
 * mutually agree to enter into or continue a business relationship or other  *
 * arrangement, the terms and conditions set forth herein shall remain        *
 * effective and, unless explicitly stated otherwise, shall prevail in the    *
 * event of a conflict in the terms in any agreements entered into between    *
 * the parties.                                                               *
 *                                                                            *
 *   4)Receiver's sole and exclusive remedy and MediaTek Inc.'s entire and    *
 * cumulative liability with respect to MediaTek Software released hereunder  *
 * will be, at MediaTek Inc.'s sole discretion, to replace or revise the      *
 * MediaTek Software at issue.                                                *
 *                                                                            *
 *   5)The transaction contemplated hereunder shall be construed in           *
 * accordance with the laws of Singapore, excluding its conflict of laws      *
 * principles.  Any disputes, controversies or claims arising thereof and     *
 * related thereto shall be settled via arbitration in Singapore, under the   *
 * then current rules of the International Chamber of Commerce (ICC).  The    *
 * arbitration shall be conducted in English. The awards of the arbitration   *
 * shall be final and binding upon both parties and shall be entered and      *
 * enforceable in any court of competent jurisdiction.                        *
 *---------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
 *
 * $Author: p4admin $
 * $Date: 2015/02/15 $
 * $RCSfile: pe_if.h,v $
 * $Revision: #1 $
 *
 *---------------------------------------------------------------------------*/

/** @file nptv_if.h
 *  NPTV video path control, include  input source select ,
 *  timing information, and video quality control
 */

#ifndef _PE_IF_H_
#define _PE_IF_H_
#define SUPPORT_SIX_COLOR_MANAGE 0

//Overide api_ycproc.h for Code Sync
#define _API_YCPROC_H_


#include "drv_hdmi.h"
#include "util.h"
#include "drv_vga.h"
#include "drv_tvd.h"
#include "api_notify.h"
#include "u_drv_cust.h"
#include "drv_ycproc.h"
///////////////////////////////////////////////////////////////////////////////////
// The following is quality item setting.
// Remember to update QUALITY_ITEM_BEGIN/QUALITY_ITEM_END,
//      if QUALITY_ITEM table is changed.

enum
{
    QUALITY_CONTRAST,
    QUALITY_CONTRAST_HIBYTE,
    QUALITY_BRIGHTNESS,
    QUALITY_SATURATION,
    QUALITY_SATURATION_HIBYTE,
    QUALITY_HUE,
    QUALITY_BACKLIGHT,

//  HSHARP
    QUALITY_SHARP1_LOW,
    QUALITY_SHARP1_LOW_NEG,
    QUALITY_SHARP1_MID,
    QUALITY_SHARP1_MID_NEG,
    QUALITY_SHARP1_HIGH,
    QUALITY_SHARP1_HIGH_NEG,

    QUALITY_SHARP1_HIGH_BAND_SEL,
    QUALITY_SHARP1_LOW_BAND_SEL,

    QUALITY_SHARP1_LOW_CORING,
    QUALITY_SHARP1_MID_CORING,
    QUALITY_SHARP1_HIGH_CORING,

    QUALITY_SHARP1_LOW_LIMIT_POS,
    QUALITY_SHARP1_LOW_LIMIT_NEG,
    QUALITY_SHARP1_MID_LIMIT_POS,
    QUALITY_SHARP1_MID_LIMIT_NEG,
    QUALITY_SHARP1_HIGH_LIMIT_POS,
    QUALITY_SHARP1_HIGH_LIMIT_NEG,

    QUALITY_SHARP1_CLIP_POS_EN,
    QUALITY_SHARP1_CLIP_NEG_EN,
    QUALITY_SHARP1_GB_CLIP_POS_EN_L,
    QUALITY_SHARP1_GB_CLIP_NEG_EN_L,
    QUALITY_SHARP1_GB_CLIP_POS_EN_M,
    QUALITY_SHARP1_GB_CLIP_NEG_EN_M,
    QUALITY_SHARP1_GB_CLIP_POS_EN_H,
    QUALITY_SHARP1_GB_CLIP_NEG_EN_H,

    QUALITY_SHARP1_CLIP_FRONT_THR_LOW,
    QUALITY_SHARP1_CLIP_FRONT_THR_HIGH,
    QUALITY_SHARP1_CLIP_POS,
    QUALITY_SHARP1_CLIP_NEG,

    QUALITY_SHARP1_LC_LOW,
    QUALITY_SHARP1_LC_LOW_NEG,
    QUALITY_SHARP1_LC_MID,
    QUALITY_SHARP1_LC_MID_NEG,
    QUALITY_SHARP1_LC_HIGH,
    QUALITY_SHARP1_LC_HIGH_NEG,

    QUALITY_SHARP1_LC_LOW_CORING,
    QUALITY_SHARP1_LC_MID_CORING,
    QUALITY_SHARP1_LC_HIGH_CORING,

    QUALITY_SHARP1_LC_LOW_LIMIT_POS,
    QUALITY_SHARP1_LC_LOW_LIMIT_NEG,
    QUALITY_SHARP1_LC_MID_LIMIT_POS,
    QUALITY_SHARP1_LC_MID_LIMIT_NEG,
    QUALITY_SHARP1_LC_HIGH_LIMIT_POS,
    QUALITY_SHARP1_LC_HIGH_LIMIT_NEG,

    QUALITY_SHARP1_LC_CLIP_POS_EN,
    QUALITY_SHARP1_LC_CLIP_NEG_EN,
    QUALITY_SHARP1_LC_TABLE_SEL,
    QUALITY_SHARP1_LC_TABLE_GAIN,
    QUALITY_SHARP1_LC_TABLE_OFFSET,

//  TDSHARP
    QUALITY_TDS_H1_GAIN,
    QUALITY_TDS_H1_GAIN_NEG,
    QUALITY_TDS_H2_GAIN,
    QUALITY_TDS_H2_GAIN_NEG,
    QUALITY_TDS_V1_GAIN,
    QUALITY_TDS_V1_GAIN_NEG,
    QUALITY_TDS_V2_GAIN,
    QUALITY_TDS_V2_GAIN_NEG,
    QUALITY_TDS_X1_GAIN,
    QUALITY_TDS_X1_GAIN_NEG,
    QUALITY_TDS_X2_GAIN,
    QUALITY_TDS_X2_GAIN_NEG,

    QUALITY_TDS_H2_SEL,
    QUALITY_TDS_V4_SEL,

    QUALITY_TDS_H1_CORING,
    QUALITY_TDS_H2_CORING,
    QUALITY_TDS_V1_CORING,
    QUALITY_TDS_V2_CORING,
    QUALITY_TDS_X1_CORING,
    QUALITY_TDS_X2_CORING,

    QUALITY_TDS_H1_LIMIT_POS,
    QUALITY_TDS_H1_LIMIT_NEG,
    QUALITY_TDS_H2_LIMIT_POS,
    QUALITY_TDS_H2_LIMIT_NEG,
    QUALITY_TDS_V1_LIMIT_POS,
    QUALITY_TDS_V1_LIMIT_NEG,
    QUALITY_TDS_V2_LIMIT_POS,
    QUALITY_TDS_V2_LIMIT_NEG,
    QUALITY_TDS_X1_LIMIT_POS,
    QUALITY_TDS_X1_LIMIT_NEG,
    QUALITY_TDS_X2_LIMIT_POS,
    QUALITY_TDS_X2_LIMIT_NEG,
    QUALITY_TDS_LIMIT_POS_ALL,
    QUALITY_TDS_LIMIT_NEG_ALL,

    QUALITY_TDS_H1_CLIP_THPOS,
    QUALITY_TDS_H1_CLIP_THNEG,
    QUALITY_TDS_H1_SOFT_CLIP_GAIN,
    QUALITY_TDS_H2_CLIP_THPOS,
    QUALITY_TDS_H2_CLIP_THNEG,
    QUALITY_TDS_H2_SOFT_CLIP_GAIN,
    QUALITY_TDS_V1_CLIP_THPOS,
    QUALITY_TDS_V1_CLIP_THNEG,
    QUALITY_TDS_V1_SOFT_CLIP_GAIN,
    QUALITY_TDS_V2_CLIP_THPOS,
    QUALITY_TDS_V2_CLIP_THNEG,
    QUALITY_TDS_V2_SOFT_CLIP_GAIN,
    QUALITY_TDS_X1_CLIP_THPOS,
    QUALITY_TDS_X1_CLIP_THNEG,
    QUALITY_TDS_X1_SOFT_CLIP_GAIN,
    QUALITY_TDS_X2_CLIP_THPOS,
    QUALITY_TDS_X2_CLIP_THNEG,
    QUALITY_TDS_X2_SOFT_CLIP_GAIN,
    QUALITY_TDS_POS_CLIP,
    QUALITY_TDS_NEG_CLIP,
    QUALITY_TDS_CLIP_GAIN,

    QUALITY_TDS_AC_LPF_EN,
    QUALITY_TDS_AC_LPF_COE,
    QUALITY_TDS_H1_LPF_SEL,
    QUALITY_TDS_H2_LPF_SEL,

    QUALITY_TDS_ADSHP_LC_EN,
    QUALITY_TDS_ADSHP_YLEV_EN,

    QUALITY_TDS_ADSHP_P1,
    QUALITY_TDS_ADSHP_P2,
    QUALITY_TDS_ADSHP_P3,
    QUALITY_TDS_ADSHP_G1,
    QUALITY_TDS_ADSHP_G2,
    QUALITY_TDS_ADSHP_G3,
    QUALITY_TDS_ADSHP_OFFSET,

    QUALITY_TDS_YLEV_P1,
    QUALITY_TDS_YLEV_P2,
    QUALITY_TDS_YLEV_P3,
    QUALITY_TDS_YLEV_P4,
    QUALITY_TDS_YLEV_G1,
    QUALITY_TDS_YLEV_G2,
    QUALITY_TDS_YLEV_G3,
    QUALITY_TDS_YLEV_G4,
    QUALITY_TDS_YLEV_ADAP_GAIN,


// PBC
    QUALITY_PBC_EN_1,
    QUALITY_PBC_BAND_SEL_1,
    QUALITY_PBC_GAIN_SIGN_1,
    QUALITY_PBC_GAIN_1,
    QUALITY_PBC_CORING_1,
    QUALITY_PBC_THETA_C_1,
    QUALITY_PBC_RADIUS_C_1,
    QUALITY_PBC_THETA_RANGE_1,
    QUALITY_PBC_RADIUS_RANGE_1,
    QUALITY_PBC_LOWER_BOUND_1,
    QUALITY_PBC_UPPER_BOUND_1,
    QUALITY_PBC_EN_2,
    QUALITY_PBC_BAND_SEL_2,
    QUALITY_PBC_GAIN_SIGN_2,
    QUALITY_PBC_GAIN_2,
    QUALITY_PBC_CORING_2,
    QUALITY_PBC_THETA_C_2,
    QUALITY_PBC_RADIUS_C_2,
    QUALITY_PBC_THETA_RANGE_2,
    QUALITY_PBC_RADIUS_RANGE_2,
    QUALITY_PBC_LOWER_BOUND_2,
    QUALITY_PBC_UPPER_BOUND_2,
    QUALITY_PBC_EN_3,
    QUALITY_PBC_BAND_SEL_3,
    QUALITY_PBC_GAIN_SIGN_3,
    QUALITY_PBC_GAIN_3,
    QUALITY_PBC_CORING_3,
    QUALITY_PBC_THETA_C_3,
    QUALITY_PBC_RADIUS_C_3,
    QUALITY_PBC_THETA_RANGE_3,
    QUALITY_PBC_RADIUS_RANGE_3,
    QUALITY_PBC_LOWER_BOUND_3,
    QUALITY_PBC_UPPER_BOUND_3,
    QUALITY_PBC_EN_4,
    QUALITY_PBC_BAND_SEL_4,
    QUALITY_PBC_GAIN_SIGN_4,
    QUALITY_PBC_GAIN_4,
    QUALITY_PBC_CORING_4,
    QUALITY_PBC_THETA_C_4,
    QUALITY_PBC_RADIUS_C_4,
    QUALITY_PBC_THETA_RANGE_4,
    QUALITY_PBC_RADIUS_RANGE_4,
    QUALITY_PBC_LOWER_BOUND_4,
    QUALITY_PBC_UPPER_BOUND_4,

//  LTI
    QUALITY_LTI_GAIN1,
    QUALITY_LTI_GAIN_NEG1,
    QUALITY_LTI_LIMIT_POS1,
    QUALITY_LTI_LIMIT_NEG1,
    QUALITY_LTI_CORING1,
    QUALITY_LTI_SOFT_CLIP_GAIN1,
    QUALITY_LTI_GAIN2,
    QUALITY_LTI_GAIN_NEG2,
    QUALITY_LTI_LIMIT_POS2,
    QUALITY_LTI_LIMIT_NEG2,
    QUALITY_LTI_CORING2,
    QUALITY_LTI_SOFT_CLIP_GAIN2,
    QUALITY_HLTI_HDEG_GAIN,
    QUALITY_HLTI_HDIFF_OFFSET,
    QUALITY_HLTI_VDEG_GAIN,
    QUALITY_HLTI_VDIFF_OFFSET,

// CDS
     QUALITY_CDS_ENA,
     QUALITY_CDS_CORING,
     QUALITY_CDS_GAIN,
     QUALITY_CDS_SLOPE,
     QUALITY_CDS_AREA,
     QUALITY_CDS_AREASHAPE,
     QUALITY_CDS_WIDEFORMAT,

//  ECTIF
    QUALITY_ECTIF_ENA,
    QUALITY_ECTIF_HD,
    QUALITY_ECTIF_LPF1,
    QUALITY_ECTIF_LPF1_SEL,
    QUALITY_ECTIF_FLPF,
    QUALITY_ECTIF_FLPF_SEL,
    QUALITY_ECTIF_U_WND_SZ,
    QUALITY_ECTIF_V_WND_SZ,
    QUALITY_ECTIF_U_STB_GAIN,
    QUALITY_ECTIF_V_STB_GAIN,
    QUALITY_ECTIF_U_STB_OFST1,
    QUALITY_ECTIF_V_STB_OFST1,
    QUALITY_ECTIF_U_STB_OFST2,
    QUALITY_ECTIF_V_STB_OFST2,
    QUALITY_ECTIF_FLAT_GAIN,
    QUALITY_ECTIF_FLAT_OFST1,
    QUALITY_ECTIF_FLAT_OFST2,
    QUALITY_ECTIF_COR,

//  ECTI
    QUALITY_ECTI_ENA,
    QUALITY_ECTI_HD,
    QUALITY_ECTI_LPF1,
    QUALITY_ECTI_LPF1_SEL,
    QUALITY_ECTI_FLPF,
    QUALITY_ECTI_FLPF_SEL,
    QUALITY_ECTI_U_WND_SZ,
    QUALITY_ECTI_V_WND_SZ,
    QUALITY_ECTI_U_STB_GAIN,
    QUALITY_ECTI_V_STB_GAIN,
    QUALITY_ECTI_U_STB_OFST1,
    QUALITY_ECTI_V_STB_OFST1,
    QUALITY_ECTI_U_STB_OFST2,
    QUALITY_ECTI_V_STB_OFST2,
    QUALITY_ECTI_FLAT_GAIN,
    QUALITY_ECTI_FLAT_OFST1,
    QUALITY_ECTI_FLAT_OFST2,
    QUALITY_ECTI_COR,
	// Quality Table of 2DNR
	QUALITY_2DNR_MESSSFT_SM_CO1MO,
	QUALITY_2DNR_MESSTHL_SM_CO1MO,
	QUALITY_2DNR_MESSSFT_MESS_CO1MO,
	QUALITY_2DNR_MESSTHL_MESS_CO1MO,
	QUALITY_2DNR_MESSSFT_EDGE_CO1MO,
	QUALITY_2DNR_MESSTHL_EDGE_CO1MO,
	QUALITY_2DNR_MESSSFT_SM_CO1ST,
	QUALITY_2DNR_MESSTHL_SM_CO1ST,
	QUALITY_2DNR_MESSSFT_MESS_CO1ST,
	QUALITY_2DNR_MESSTHL_MESS_CO1ST,
	QUALITY_2DNR_MESSSFT_EDGE_CO1ST,
	QUALITY_2DNR_MESSTHL_EDGE_CO1ST,
	QUALITY_2DNR_BLDLV_SM_CO1,
	QUALITY_2DNR_BLDLV_MESS_CO1,
	QUALITY_2DNR_BLDLV_EDGE_CO1,
	QUALITY_2DNR_MESSSFT_SM_CO2MO,
	QUALITY_2DNR_MESSTHL_SM_CO2MO,
	QUALITY_2DNR_MESSSFT_MESS_CO2MO,
	QUALITY_2DNR_MESSTHL_MESS_CO2MO,
	QUALITY_2DNR_MESSSFT_EDGE_CO2MO,
	QUALITY_2DNR_MESSTHL_EDGE_CO2MO,
	QUALITY_2DNR_MESSSFT_SM_CO2ST,
	QUALITY_2DNR_MESSTHL_SM_CO2ST,
	QUALITY_2DNR_MESSSFT_MESS_CO2ST,
	QUALITY_2DNR_MESSTHL_MESS_CO2ST,
	QUALITY_2DNR_MESSSFT_EDGE_CO2ST,
	QUALITY_2DNR_MESSTHL_EDGE_CO2ST,
	QUALITY_2DNR_BLDLV_SM_CO2,
	QUALITY_2DNR_BLDLV_MESS_CO2,
	QUALITY_2DNR_BLDLV_EDGE_CO2,
	QUALITY_2DNR_MESSSFT_SM_CO3MO,
	QUALITY_2DNR_MESSTHL_SM_CO3MO,
	QUALITY_2DNR_MESSSFT_MESS_CO3MO,
	QUALITY_2DNR_MESSTHL_MESS_CO3MO,
	QUALITY_2DNR_MESSSFT_EDGE_CO3MO,
	QUALITY_2DNR_MESSTHL_EDGE_CO3MO,
	QUALITY_2DNR_MESSSFT_SM_CO3ST,
	QUALITY_2DNR_MESSTHL_SM_CO3ST,
	QUALITY_2DNR_MESSSFT_MESS_CO3ST,
	QUALITY_2DNR_MESSTHL_MESS_CO3ST,
	QUALITY_2DNR_MESSSFT_EDGE_CO3ST,
	QUALITY_2DNR_MESSTHL_EDGE_CO3ST,
	QUALITY_2DNR_BLDLV_SM_CO3,
	QUALITY_2DNR_BLDLV_MESS_CO3,
	QUALITY_2DNR_BLDLV_EDGE_CO3,
	QUALITY_2DNR_MESSSFT_SM_FRST,
	QUALITY_2DNR_MESSTHL_SM_FRST,
	QUALITY_2DNR_MESSSFT_MESS_FRST,
	QUALITY_2DNR_MESSTHL_MESS_FRST,
	QUALITY_2DNR_MESSSFT_EDGE_FRST,
	QUALITY_2DNR_MESSTHL_EDGE_FRST,
	QUALITY_2DNR_BLDLV_SM_FRST,
	QUALITY_2DNR_BLDLV_MESS_FRST,
	QUALITY_2DNR_BLDLV_EDGE_FRST,
	QUALITY_2DNR_MESSSFT_SM_MO,
	QUALITY_2DNR_MESSTHL_SM_MO,
	QUALITY_2DNR_MESSSFT_MESS_MO,
	QUALITY_2DNR_MESSTHL_MESS_MO,
	QUALITY_2DNR_MESSSFT_EDGE_MO,
	QUALITY_2DNR_MESSTHL_EDGE_MO,
	QUALITY_2DNR_BLDLV_SM_MO,
	QUALITY_2DNR_BLDLV_MESS_MO,
	QUALITY_2DNR_BLDLV_EDGE_MO,
	QUALITY_2DNR_MESSSFT_SM_ST,
	QUALITY_2DNR_MESSTHL_SM_ST,
	QUALITY_2DNR_MESSSFT_MESS_ST,
	QUALITY_2DNR_MESSTHL_MESS_ST,
	QUALITY_2DNR_MESSSFT_EDGE_ST,
	QUALITY_2DNR_MESSTHL_EDGE_ST,
	QUALITY_2DNR_BLDLV_SM_ST,
	QUALITY_2DNR_BLDLV_MESS_ST,
	QUALITY_2DNR_BLDLV_EDGE_ST,
	QUALITY_2DNR_MESSSFT_SM_BK,
	QUALITY_2DNR_MESSTHL_SM_BK,
	QUALITY_2DNR_MESSSFT_MESS_BK,
	QUALITY_2DNR_MESSTHL_MESS_BK,
	QUALITY_2DNR_MESSSFT_EDGE_BK,
	QUALITY_2DNR_MESSTHL_EDGE_BK,
	QUALITY_2DNR_BLDLV_SM_BK,
	QUALITY_2DNR_BLDLV_MESS_BK,
	QUALITY_2DNR_BLDLV_EDGE_BK,
	QUALITY_2DNR_MESSSFT_SM_DEF,
	QUALITY_2DNR_MESSTHL_SM_DEF,
	QUALITY_2DNR_MESSSFT_MESS_DEF,
	QUALITY_2DNR_MESSTHL_MESS_DEF,
	QUALITY_2DNR_MESSSFT_EDGE_DEF,
	QUALITY_2DNR_MESSTHL_EDGE_DEF,
	QUALITY_2DNR_BLDLV_SM_DEF,
	QUALITY_2DNR_BLDLV_MESS_DEF,
	QUALITY_2DNR_BLDLV_EDGE_DEF,
	QUALITY_2DNR_GLOBAL_BLEND,
	//End of 2D NR
	// Quality Table of MPEG NR
	QUALITY_2DNR_MESSSFT_MOS_CO1MO,
	QUALITY_2DNR_MESSTHL_MOS_CO1MO,
	QUALITY_2DNR_MESSSFT_MOS_CO1ST,
	QUALITY_2DNR_MESSTHL_MOS_CO1ST,
	QUALITY_2DNR_BLDLV_BK_CO1,
	QUALITY_2DNR_BLDLV_MOS_CO1,
	QUALITY_2DNR_MESSSFT_MOS_CO2MO,
	QUALITY_2DNR_MESSTHL_MOS_CO2MO,
	QUALITY_2DNR_MESSSFT_MOS_CO2ST,
	QUALITY_2DNR_MESSTHL_MOS_CO2ST,
	QUALITY_2DNR_BLDLV_BK_CO2,
	QUALITY_2DNR_BLDLV_MOS_CO2,
	QUALITY_2DNR_MESSSFT_MOS_CO3MO,
	QUALITY_2DNR_MESSTHL_MOS_CO3MO,
	QUALITY_2DNR_MESSSFT_MOS_CO3ST,
	QUALITY_2DNR_MESSTHL_MOS_CO3ST,
	QUALITY_2DNR_BLDLV_BK_CO3,
	QUALITY_2DNR_BLDLV_MOS_CO3,
	QUALITY_2DNR_MESSSFT_MOS_FRST,
	QUALITY_2DNR_MESSTHL_MOS_FRST,
	QUALITY_2DNR_BLDLV_BK_FRST,
	QUALITY_2DNR_BLDLV_MOS_FRST,
	QUALITY_2DNR_MESSSFT_MOS_MO,
	QUALITY_2DNR_MESSTHL_MOS_MO,
	QUALITY_2DNR_BLDLV_BK_MO,
	QUALITY_2DNR_BLDLV_MOS_MO,
	QUALITY_2DNR_MESSSFT_MOS_ST,
	QUALITY_2DNR_MESSTHL_MOS_ST,
	QUALITY_2DNR_BLDLV_BK_ST,
	QUALITY_2DNR_BLDLV_MOS_ST,
	QUALITY_2DNR_MESSSFT_MOS_BK,
	QUALITY_2DNR_MESSTHL_MOS_BK,
	QUALITY_2DNR_BLDLV_BK_BK,
	QUALITY_2DNR_BLDLV_MOS_BK,
	QUALITY_2DNR_MESSSFT_MOS_DEF,
	QUALITY_2DNR_MESSTHL_MOS_DEF,
	QUALITY_2DNR_BLDLV_MOS_DEF,
	QUALITY_2DNR_CUR_SM_NUM,
	QUALITY_2DNR_CUR_SM_THR,
	QUALITY_2DNR_NEAREDGE_SELWIDTH,
	QUALITY_2DNR_NEAREDGE_EDGE_THR,
	//End of MPEG NR
	// Quality Table of 3DNR
	QUALITY_3DNR_C_USE_YTBL,
	QUALITY_3DNR_C_MOTH,
	QUALITY_3DNR_CIIR_TBL7,
	QUALITY_3DNR_CIIR_TBL6,
	QUALITY_3DNR_CIIR_TBL5,
	QUALITY_3DNR_CIIR_TBL4,
	QUALITY_3DNR_CIIR_TBL3,
	QUALITY_3DNR_CIIR_TBL2,
	QUALITY_3DNR_CIIR_TBL1,
	QUALITY_3DNR_CIIR_TBL0,
	QUALITY_3DNR_DEFTBTH,
	QUALITY_3DNR_DEF_TBL7,
	QUALITY_3DNR_DEF_TBL6,
	QUALITY_3DNR_DEF_TBL5,
	QUALITY_3DNR_DEF_TBL4,
	QUALITY_3DNR_DEF_TBL3,
	QUALITY_3DNR_DEF_TBL2,
	QUALITY_3DNR_DEF_TBL1,
	QUALITY_3DNR_DEF_TBL0,
	QUALITY_3DNR_ENCOLOR,
	QUALITY_3DNR_COLOR_TH,
	QUALITY_3DNR_COLOR_TBL7,
	QUALITY_3DNR_COLOR_TBL6,
	QUALITY_3DNR_COLOR_TBL5,
	QUALITY_3DNR_COLOR_TBL4,
	QUALITY_3DNR_COLOR_TBL3,
	QUALITY_3DNR_COLOR_TBL2,
	QUALITY_3DNR_COLOR_TBL1,
	QUALITY_3DNR_COLOR_TBL0,
	QUALITY_3DNR_BDYEDGEDETEN_ALL,
	QUALITY_3DNR_MOEDGE_TH,
	QUALITY_3DNR_MOEDGE_TBL7,
	QUALITY_3DNR_MOEDGE_TBL6,
	QUALITY_3DNR_MOEDGE_TBL5,
	QUALITY_3DNR_MOEDGE_TBL4,
	QUALITY_3DNR_MOEDGE_TBL3,
	QUALITY_3DNR_MOEDGE_TBL2,
	QUALITY_3DNR_MOEDGE_TBL1,
	QUALITY_3DNR_MOEDGE_TBL0,
	QUALITY_3DNR_STEDGE_TH,
	QUALITY_3DNR_STEDGE_TBL7,
	QUALITY_3DNR_STEDGE_TBL6,
	QUALITY_3DNR_STEDGE_TBL5,
	QUALITY_3DNR_STEDGE_TBL4,
	QUALITY_3DNR_STEDGE_TBL3,
	QUALITY_3DNR_STEDGE_TBL2,
	QUALITY_3DNR_STEDGE_TBL1,
	QUALITY_3DNR_STEDGE_TBL0,
	QUALITY_3DNR_ENFBCH,
	QUALITY_3DNR_FSTILLTB,
	QUALITY_3DNR_FSTILL_TBL7,
	QUALITY_3DNR_FSTILL_TBL6,
	QUALITY_3DNR_FSTILL_TBL5,
	QUALITY_3DNR_FSTILL_TBL4,
	QUALITY_3DNR_FSTILL_TBL3,
	QUALITY_3DNR_FSTILL_TBL2,
	QUALITY_3DNR_FSTILL_TBL1,
	QUALITY_3DNR_FSTILL_TBL0,
	QUALITY_3DNR_FSMLMOTBTH,
	QUALITY_3DNR_FSMLMO_TBL7,
	QUALITY_3DNR_FSMLMO_TBL6,
	QUALITY_3DNR_FSMLMO_TBL5,
	QUALITY_3DNR_FSMLMO_TBL4,
	QUALITY_3DNR_FSMLMO_TBL3,
	QUALITY_3DNR_FSMLMO_TBL2,
	QUALITY_3DNR_FSMLMO_TBL1,
	QUALITY_3DNR_FSMLMO_TBL0,
	QUALITY_3DNR_BGMOTBTH,
	QUALITY_3DNR_FBIGMO_TBL7,
	QUALITY_3DNR_FBIGMO_TBL6,
	QUALITY_3DNR_FBIGMO_TBL5,
	QUALITY_3DNR_FBIGMO_TBL4,
	QUALITY_3DNR_FBIGMO_TBL3,
	QUALITY_3DNR_FBIGMO_TBL2,
	QUALITY_3DNR_FBIGMO_TBL1,
	QUALITY_3DNR_FBIGMO_TBL0,
    //END OF 3DNR
    QUALITY_ANR_SAT_LV0,
    QUALITY_ANR_H_CORING_LV0,
    QUALITY_ANR_LCSHARP_MID_LV0,
    QUALITY_ANR_LCSHARP_HIGH_LV0,
    QUALITY_ANR_DEF_TH_LV0,
    QUALITY_ANR_DEF_TBL7_LV0,
    QUALITY_ANR_DEF_TBL6_LV0,
    QUALITY_ANR_DEF_TBL5_LV0,
    QUALITY_ANR_DEF_TBL4_LV0,
    QUALITY_ANR_DEF_TBL3_LV0,
    QUALITY_ANR_DEF_TBL2_LV0,
    QUALITY_ANR_DEF_TBL1_LV0,
    QUALITY_ANR_DEF_TBL0_LV0,
    QUALITY_ANR_MOEGE_TH_LV0,
    QUALITY_ANR_MOEDGE_TBL7_LV0,
    QUALITY_ANR_MOEDGE_TBL6_LV0,
    QUALITY_ANR_MOEDGE_TBL5_LV0,
    QUALITY_ANR_MOEDGE_TBL4_LV0,
    QUALITY_ANR_MOEDGE_TBL3_LV0,
    QUALITY_ANR_MOEDGE_TBL2_LV0,
    QUALITY_ANR_MOEDGE_TBL1_LV0,
    QUALITY_ANR_MOEDGE_TBL0_LV0,

    QUALITY_ANR_SAT_LV1,
    QUALITY_ANR_H_CORING_LV1,
    QUALITY_ANR_LCSHARP_MID_LV1,
    QUALITY_ANR_LCSHARP_HIGH_LV1,
    QUALITY_ANR_DEF_TH_LV1,
    QUALITY_ANR_DEF_TBL7_LV1,
    QUALITY_ANR_DEF_TBL6_LV1,
    QUALITY_ANR_DEF_TBL5_LV1,
    QUALITY_ANR_DEF_TBL4_LV1,
    QUALITY_ANR_DEF_TBL3_LV1,
    QUALITY_ANR_DEF_TBL2_LV1,
    QUALITY_ANR_DEF_TBL1_LV1,
    QUALITY_ANR_DEF_TBL0_LV1,
    QUALITY_ANR_MOEGE_TH_LV1,
    QUALITY_ANR_MOEDGE_TBL7_LV1,
    QUALITY_ANR_MOEDGE_TBL6_LV1,
    QUALITY_ANR_MOEDGE_TBL5_LV1,
    QUALITY_ANR_MOEDGE_TBL4_LV1,
    QUALITY_ANR_MOEDGE_TBL3_LV1,
    QUALITY_ANR_MOEDGE_TBL2_LV1,
    QUALITY_ANR_MOEDGE_TBL1_LV1,
    QUALITY_ANR_MOEDGE_TBL0_LV1,

    QUALITY_ANR_SAT_LV2,
    QUALITY_ANR_H_CORING_LV2,
    QUALITY_ANR_LCSHARP_MID_LV2,
    QUALITY_ANR_LCSHARP_HIGH_LV2,
    QUALITY_ANR_DEF_TH_LV2,
    QUALITY_ANR_DEF_TBL7_LV2,
    QUALITY_ANR_DEF_TBL6_LV2,
    QUALITY_ANR_DEF_TBL5_LV2,
    QUALITY_ANR_DEF_TBL4_LV2,
    QUALITY_ANR_DEF_TBL3_LV2,
    QUALITY_ANR_DEF_TBL2_LV2,
    QUALITY_ANR_DEF_TBL1_LV2,
    QUALITY_ANR_DEF_TBL0_LV2,
    QUALITY_ANR_MOEGE_TH_LV2,
    QUALITY_ANR_MOEDGE_TBL7_LV2,
    QUALITY_ANR_MOEDGE_TBL6_LV2,
    QUALITY_ANR_MOEDGE_TBL5_LV2,
    QUALITY_ANR_MOEDGE_TBL4_LV2,
    QUALITY_ANR_MOEDGE_TBL3_LV2,
    QUALITY_ANR_MOEDGE_TBL2_LV2,
    QUALITY_ANR_MOEDGE_TBL1_LV2,
    QUALITY_ANR_MOEDGE_TBL0_LV2,

    QUALITY_ANR_SAT_LV3,
    QUALITY_ANR_H_CORING_LV3,
    QUALITY_ANR_LCSHARP_MID_LV3,
    QUALITY_ANR_LCSHARP_HIGH_LV3,
    QUALITY_ANR_DEF_TH_LV3,
    QUALITY_ANR_DEF_TBL7_LV3,
    QUALITY_ANR_DEF_TBL6_LV3,
    QUALITY_ANR_DEF_TBL5_LV3,
    QUALITY_ANR_DEF_TBL4_LV3,
    QUALITY_ANR_DEF_TBL3_LV3,
    QUALITY_ANR_DEF_TBL2_LV3,
    QUALITY_ANR_DEF_TBL1_LV3,
    QUALITY_ANR_DEF_TBL0_LV3,
    QUALITY_ANR_MOEGE_TH_LV3,
    QUALITY_ANR_MOEDGE_TBL7_LV3,
    QUALITY_ANR_MOEDGE_TBL6_LV3,
    QUALITY_ANR_MOEDGE_TBL5_LV3,
    QUALITY_ANR_MOEDGE_TBL4_LV3,
    QUALITY_ANR_MOEDGE_TBL3_LV3,
    QUALITY_ANR_MOEDGE_TBL2_LV3,
    QUALITY_ANR_MOEDGE_TBL1_LV3,
    QUALITY_ANR_MOEDGE_TBL0_LV3,

    QUALITY_ANR_SAT_LV4,
    QUALITY_ANR_H_CORING_LV4,
    QUALITY_ANR_LCSHARP_MID_LV4,
    QUALITY_ANR_LCSHARP_HIGH_LV4,
    QUALITY_ANR_DEF_TH_LV4,
    QUALITY_ANR_DEF_TBL7_LV4,
    QUALITY_ANR_DEF_TBL6_LV4,
    QUALITY_ANR_DEF_TBL5_LV4,
    QUALITY_ANR_DEF_TBL4_LV4,
    QUALITY_ANR_DEF_TBL3_LV4,
    QUALITY_ANR_DEF_TBL2_LV4,
    QUALITY_ANR_DEF_TBL1_LV4,
    QUALITY_ANR_DEF_TBL0_LV4,
    QUALITY_ANR_MOEGE_TH_LV4,
    QUALITY_ANR_MOEDGE_TBL7_LV4,
    QUALITY_ANR_MOEDGE_TBL6_LV4,
    QUALITY_ANR_MOEDGE_TBL5_LV4,
    QUALITY_ANR_MOEDGE_TBL4_LV4,
    QUALITY_ANR_MOEDGE_TBL3_LV4,
    QUALITY_ANR_MOEDGE_TBL2_LV4,
    QUALITY_ANR_MOEDGE_TBL1_LV4,
    QUALITY_ANR_MOEDGE_TBL0_LV4,

    QUALITY_ANR_SAT_LV5,
    QUALITY_ANR_H_CORING_LV5,
    QUALITY_ANR_LCSHARP_MID_LV5,
    QUALITY_ANR_LCSHARP_HIGH_LV5,
    QUALITY_ANR_DEF_TH_LV5,
    QUALITY_ANR_DEF_TBL7_LV5,
    QUALITY_ANR_DEF_TBL6_LV5,
    QUALITY_ANR_DEF_TBL5_LV5,
    QUALITY_ANR_DEF_TBL4_LV5,
    QUALITY_ANR_DEF_TBL3_LV5,
    QUALITY_ANR_DEF_TBL2_LV5,
    QUALITY_ANR_DEF_TBL1_LV5,
    QUALITY_ANR_DEF_TBL0_LV5,
    QUALITY_ANR_MOEGE_TH_LV5,
    QUALITY_ANR_MOEDGE_TBL7_LV5,
    QUALITY_ANR_MOEDGE_TBL6_LV5,
    QUALITY_ANR_MOEDGE_TBL5_LV5,
    QUALITY_ANR_MOEDGE_TBL4_LV5,
    QUALITY_ANR_MOEDGE_TBL3_LV5,
    QUALITY_ANR_MOEDGE_TBL2_LV5,
    QUALITY_ANR_MOEDGE_TBL1_LV5,
    QUALITY_ANR_MOEDGE_TBL0_LV5,

    QUALITY_ANR_SAT_LV6,
    QUALITY_ANR_H_CORING_LV6,
    QUALITY_ANR_LCSHARP_MID_LV6,
    QUALITY_ANR_LCSHARP_HIGH_LV6,
    QUALITY_ANR_DEF_TH_LV6,
    QUALITY_ANR_DEF_TBL7_LV6,
    QUALITY_ANR_DEF_TBL6_LV6,
    QUALITY_ANR_DEF_TBL5_LV6,
    QUALITY_ANR_DEF_TBL4_LV6,
    QUALITY_ANR_DEF_TBL3_LV6,
    QUALITY_ANR_DEF_TBL2_LV6,
    QUALITY_ANR_DEF_TBL1_LV6,
    QUALITY_ANR_DEF_TBL0_LV6,
    QUALITY_ANR_MOEGE_TH_LV6,
    QUALITY_ANR_MOEDGE_TBL7_LV6,
    QUALITY_ANR_MOEDGE_TBL6_LV6,
    QUALITY_ANR_MOEDGE_TBL5_LV6,
    QUALITY_ANR_MOEDGE_TBL4_LV6,
    QUALITY_ANR_MOEDGE_TBL3_LV6,
    QUALITY_ANR_MOEDGE_TBL2_LV6,
    QUALITY_ANR_MOEDGE_TBL1_LV6,
    QUALITY_ANR_MOEDGE_TBL0_LV6,

    QUALITY_ANR_SAT_LV7,
    QUALITY_ANR_H_CORING_LV7,
    QUALITY_ANR_LCSHARP_MID_LV7,
    QUALITY_ANR_LCSHARP_HIGH_LV7,
    QUALITY_ANR_DEF_TH_LV7,
    QUALITY_ANR_DEF_TBL7_LV7,
    QUALITY_ANR_DEF_TBL6_LV7,
    QUALITY_ANR_DEF_TBL5_LV7,
    QUALITY_ANR_DEF_TBL4_LV7,
    QUALITY_ANR_DEF_TBL3_LV7,
    QUALITY_ANR_DEF_TBL2_LV7,
    QUALITY_ANR_DEF_TBL1_LV7,
    QUALITY_ANR_DEF_TBL0_LV7,
    QUALITY_ANR_MOEGE_TH_LV7,
    QUALITY_ANR_MOEDGE_TBL7_LV7,
    QUALITY_ANR_MOEDGE_TBL6_LV7,
    QUALITY_ANR_MOEDGE_TBL5_LV7,
    QUALITY_ANR_MOEDGE_TBL4_LV7,
    QUALITY_ANR_MOEDGE_TBL3_LV7,
    QUALITY_ANR_MOEDGE_TBL2_LV7,
    QUALITY_ANR_MOEDGE_TBL1_LV7,
    QUALITY_ANR_MOEDGE_TBL0_LV7,
    //END OF AUTO NR

    QUALITY_AL_ON_1_OFF_0,

    QUALITY_CBOOST_ONOFF,
    QUALITY_CBOOST_MINUS_EN,
    QUALITY_CBOOST_GAIN,
    QUALITY_CBOOST_RNG_SEL,

    QUALITY_AL_GAIN,
    QUALITY_AL_OFFSET,
    QUALITY_AL_LIMIT,
    QUALITY_AL_METHOD,
    QUALITY_AL_SCENE_CHANGE_MAX_THD,
    QUALITY_AL_SCENE_CHANGE_TOTAL_THD,
    QUALITY_AL_NOISE_THRESHOLD,
    QUALITY_BWS_ON_1_OFF_0,
    QUALITY_BWS_BLACK_ON_1_OFF_0,
    QUALITY_BWS_BLACK_LEVEL,
    QUALITY_BWS_BLACK_GAIN,
    QUALITY_BWS_BLACK_OFFSET,
    QUALITY_BWS_BLACK_RATIO,
    QUALITY_BWS_BLACK_LIMIT,
    QUALITY_DYNBS_RANGE,
    QUALITY_DYNBS_ONOFF,
    QUALITY_DYNBS_DBG,
    QUALITY_DYNBS_PXL_THD1,
    QUALITY_DYNBS_PXL_THD2,
    QUALITY_DYNBS_DIST_THDH,
    QUALITY_DYNBS_DIST_THDM,
    QUALITY_DYNBS_DIST_THDL,
    QUALITY_DYNBS_LIMIT_BTM,
    QUALITY_DYNBS_LIMIT_TOP,
    QUALITY_DYNBS_GAIN_BTM,
    QUALITY_DYNBS_GAIN_TOP,
    QUALITY_DYNBS_OFFSET_BTM,
    QUALITY_DYNBS_OFFSET_TOP,

    // color tone protection
    QUALITY_TONE_PROT_ON_1_OFF_0,
    QUALITY_TONE_PROT_COLOR_KR,
    QUALITY_TONE_PROT_COLOR_KG,
    QUALITY_TONE_PROT_COLOR_KB,
    QUALITY_TONE_PROT_ASL_REMAP_R_LO,
    QUALITY_TONE_PROT_ASL_REMAP_R_HI,
    QUALITY_TONE_PROT_ASL_REMAP_G_LO,
    QUALITY_TONE_PROT_ASL_REMAP_G_HI,
    QUALITY_TONE_PROT_ASL_REMAP_B_LO,
    QUALITY_TONE_PROT_ASL_REMAP_B_HI,

    QUALITY_TONE_PROT_ASL_REMAP_W_DECAY,

    // y-gamma decay
    QUALITY_YGAMMA_DECAY_BRIGHT,
    QUALITY_YGAMMA_DECAY_LO,
    QUALITY_YGAMMA_DECAY_HI,

    QUALITY_BWS_KEEP_MID_ONOFF,
    QUALITY_BWS_KEEP_MID_X_LVL,
    QUALITY_BWS_KEEP_MID_Y_POS,
    QUALITY_BWS_WHITE_ON_1_OFF_0,
    QUALITY_BWS_WHITE_LEVEL,
    QUALITY_BWS_WHITE_GAIN,
    QUALITY_BWS_WHITE_OFFSET,
    QUALITY_BWS_WHITE_RATIO,
    QUALITY_BWS_WHITE_LIMIT,
    QUALITY_R_GAIN,
    QUALITY_G_GAIN,
    QUALITY_B_GAIN,
    QUALITY_R_GAIN_LSB,
    QUALITY_G_GAIN_LSB,
    QUALITY_B_GAIN_LSB,
    QUALITY_R_OFFSET,
    QUALITY_G_OFFSET,
    QUALITY_B_OFFSET,
    QUALITY_R_OFFSET_LSB,
    QUALITY_G_OFFSET_LSB,
    QUALITY_B_OFFSET_LSB,

    QUALITY_BLUE_STRETCH_ENABLE,
    QUALITY_BLUE_STRETCH_GAIN_R,
    QUALITY_BLUE_STRETCH_GAIN_G,
    QUALITY_BLUE_STRETCH_GAIN_B,
    QUALITY_BLUE_STRETCH_LUMA_THD,
    QUALITY_BLUE_STRETCH_SAT_THD,

//GAMMA
    QUALITY_GAMMA_CURVE_SEL,

//SCE
    QUALITY_SCE_LUMA_GAIN_OFF,
    QUALITY_SCE_SAT_GAIN_OFF,
    QUALITY_SCE_HUE_GAIN_OFF,
    QUALITY_SCE_LUMA_GAIN_LOW,
    QUALITY_SCE_SAT_GAIN_LOW,
    QUALITY_SCE_HUE_GAIN_LOW,
    QUALITY_SCE_LUMA_GAIN_MID,
    QUALITY_SCE_SAT_GAIN_MID,
    QUALITY_SCE_HUE_GAIN_MID,
    QUALITY_SCE_LUMA_GAIN_HIGH,
    QUALITY_SCE_SAT_GAIN_HIGH,
    QUALITY_SCE_HUE_GAIN_HIGH,

    QUALITY_MAX
};

enum
{
    PQ_CONTRAST,
    PQ_BRIGHTNESS,
    PQ_SATURATION,
    PQ_HUE,
    PQ_MAX
};


#ifdef CC_MT5392B
// XVYCC R/W Mode
enum
{
    OFF_MODE,
    RGB_MODE,
    R_MODE,
    G_MODE,
    B_MODE
};
#endif

#define QUALITY_SHARP_BEGIN                 QUALITY_SHARP1_LOW
#define QUALITY_SHARP_END                   QUALITY_HLTI_VDIFF_OFFSET

#define QUALITY_CDS_BEGIN                 	QUALITY_CDS_ENA
#define QUALITY_CDS_END						QUALITY_CDS_WIDEFORMAT

#define QUALITY_LTI_BEGIN                   QUALITY_LTI_GAIN1
#define QUALITY_LTI_END                     QUALITY_HLTI_VDIFF_OFFSET

#define QUALITY_CTI_BEGIN				    QUALITY_ECTIF_ENA
#define QUALITY_CTI_END						QUALITY_ECTI_COR

// TBD menghu
#define QUALITY_3DNR_BEGIN				    QUALITY_3DNR_C_USE_YTBL
#define QUALITY_3DNR_END				    QUALITY_3DNR_FBIGMO_TBL0

#define QUALITY_2DNR_BEGIN			        QUALITY_2DNR_MESSSFT_SM_CO1MO
#define QUALITY_2DNR_END				    QUALITY_2DNR_GLOBAL_BLEND

#define QUALITY_ANR_BEGIN			        QUALITY_ANR_SAT_LV0
#define QUALITY_ANR_END				        QUALITY_ANR_MOEDGE_TBL0_LV7
#define QUALITY_ANR_SIZE_PER_LV             (QUALITY_ANR_SAT_LV1-QUALITY_ANR_SAT_LV0)

#define QUALITY_MPEGNR_BEGIN				QUALITY_2DNR_MESSSFT_MOS_CO1MO
#define QUALITY_MPEGNR_END					QUALITY_2DNR_NEAREDGE_EDGE_THR

#define QUALITY_ADAPTIVE_LUMA_AL_BEGIN  QUALITY_AL_ON_1_OFF_0
#define QUALITY_ADAPTIVE_LUMA_AL_END    QUALITY_AL_NOISE_THRESHOLD

#define QUALITY_ADAPTIVE_LUMA_BLS_BEGIN  QUALITY_BWS_ON_1_OFF_0
#define QUALITY_ADAPTIVE_LUMA_BLS_END    QUALITY_BWS_KEEP_MID_Y_POS

#define QUALITY_ADAPTIVE_LUMA_WLS_BEGIN  QUALITY_BWS_WHITE_ON_1_OFF_0
#define QUALITY_ADAPTIVE_LUMA_WLS_END    QUALITY_BWS_WHITE_LIMIT

#define QUALITY_BLUE_STRETCH_BEGIN QUALITY_BLUE_STRETCH_ENABLE
#define QUALITY_BLUE_STRETCH_END QUALITY_BLUE_STRETCH_SAT_THD

#define QUALITY_GAMMA_BEGIN     QUALITY_GAMMA_CURVE_SEL
#define QUALITY_GAMMA_END       QUALITY_GAMMA_CURVE_SEL

#define QUALITY_SCE_BEGIN     QUALITY_SCE_LUMA_GAIN_OFF
#define QUALITY_SCE_END       QUALITY_SCE_HUE_GAIN_HIGH

// End of QUALITY_ITEM setting.
///////////////////////////////////////////////////////////////////////////////////
extern UINT8 QUALITY_TBL[QUALITY_MAX];

#define wReadQualityTable(wAddr)	 QUALITY_TBL[wAddr]
#define wWriteQualityTable(wAddr, wData) (QUALITY_TBL[wAddr] = wData)

// For flash PQ architecture.
#define FROM_DFT		0xFFFF

// Define the maximum number of items in custom quality table.
#ifndef CUSTOM_QTY_TBL_DIM
    #define CUSTOM_QTY_TBL_DIM	512 // Change dimension number in drv_opt, not here.
#endif // #ifndef CUSTOM_QTY_TBL_DIM

#define VIDEO_GAIN_DFT              0x200
#define VIDEO_EXT_GAIN_DFT      0x254
#define VIDEO_EXT_GAIN_MAX      0x3FF
#define VIDEO_OFST_DFT              0x0
#define VIDEO_EXT_OFST_DFT      0x3C0
#define VIDEO_EXT_OFST_MAX      0x3FF
#define VIDEO_EXT_APL_UPPER_BOUND	200
#define VIDEO_EXT_APL_LOWER_BOUND	80
#define VIDEO_EXT_FIND_MAX_HIST_INDEX_TH	80
#define	ADAPTIVE_BACKLIGHT_FIND_MAX_HIST_INDEX_TH	1000

#define VIDEO_EXT_FRAME_COUNT	48

enum
{
    ADP_BACKLIGHT_HIGH_IDX = 0,
    ADP_BACKLIGHT_MIDDLE_IDX,
    ADP_BACKLIGHT_LOW_IDX,
    ADP_BACKLIGHT_END_IDX
};

enum
{
    DFT_QTY_TBL = 0,            // Defautl quality table.
    MDY_QTY_TBL                 // Modify quality table.
};

/**
 * @ DFT_QTY	denotes the min, max, and default HW values of corresponding quality item.
 * 				These values are default setting for all of the video timing.
 */
enum
{
    DFT_QTY_MIN = 0,
    DFT_QTY_MAX,
    DFT_QTY_DFT,
    DFT_QTY_REFERENCE,
    DFT_QTY_ITEM,
    DFT_QTY_DIM
};

//typedef
typedef struct
{
    UINT8 bDftQtyMin;
    UINT8 bDftQtyMax;
    UINT8 bDftQtyDft;
    UINT16 wDftQtyRefenence;
}
tagDFT_QTY;

/**
 * @ MDY_QTY	denotes the min, max, and default HW values of corresponding quality item.
 * 				These values are dedicated to MDY_QTY_INDEX video timing.
 */
enum
{
    MDY_QTY_MIN = 0,
    MDY_QTY_MAX,
    MDY_QTY_DFT,
    MDY_QTY_INDEX,
    MDY_QTY_ITEM,
    MDY_QTY_DIM
};

/**
 * @ QTY_IDX_RANGE	denotes the range of quality index timing.
 */
enum
{
    QTY_IDX_RANGE_BEGIN = 0,
    QTY_IDX_RANGE_END,
    QTY_IDX_RANGE_DIM
};

enum
{
    REGISTER_CALLBACK,
    REGISTER_PATH,
    REGISTER_ON_OFF,
    REGISTER_DIM,
};

enum
{
    DEMO_MODE_ARG_COMB,
    DEMO_MODE_ARG_HSHARP,
    DEMO_MODE_ARG_NR,
    DEMO_MODE_ARG_DI,
    DEMO_MODE_ARG_MJC,
    DEMO_MODE_BEFORE_SCALER_END
};

enum
{
    DEMO_MODE_ARG_2DSHARP,
    DEMO_MODE_ARG_MLC,
    DEMO_MODE_AFTER_SCALER_END
};

enum
{
    BL_STATE_POWERON,
    BL_STATE_OUTPUT_FR_CHANGE,
};

#define DFT_GAMMA_TABLE_SIZE	768     // 256*3
#define DFT_SCE_TABLE_SIZE		1456    // 360*4 + 16 (chroma comp)
#define DFT_QTY_TABLE_SIZE		256
#define DFT_QTY_TIMING_SIZE		12
#define DFT_XML_VER				"1.0"   // max size: FILE_HEAD_VER_SIZE

#define FLASHPQ_ID		"PQHD"  // size: TBL_HEAD_ID_SIZE
#define GAMMA_ID		"GAID"  // size: TBL_HEAD_ID_SIZE
#define SCE_ID			"SCID"  // size: TBL_HEAD_ID_SIZE
#define QTY_ID			"QTID"  // size: TBL_HEAD_ID_SIZE
#define QTY_ITEM		"QUALITY ITEMS"
#define QTY_ITEM_ENDING	"qTyEndId"
#define ITEM_BYTES		2
#define QTY_ITEM_MAX	0xFFFF
#define FILE_HEAD_VER_SIZE	10

#define TBL_FILE_ID_SIZE	6
#define TBL_HEAD_ID_SIZE	8
#define TBL_HEAD_SCRIPT_SIZE	24
#define TBL_HEAD_DATE_SIZE		12
#define TBL_HEAD_HASH			4
#define TBL_HEAD_SIZE (TBL_HEAD_ID_SIZE+TBL_HEAD_SCRIPT_SIZE+TBL_HEAD_DATE_SIZE+TBL_HEAD_HASH)
#define TIMING_SCRIPT_SIZE	16
#define TBL_END_SIZE		8

#define SCE_SIZE_538X 1456
#define SCE_SIZE_5391 352       // 22*16
#define SCE_SIZE_8222 192       // 12*16
#define SCE_SIZE_5360 192       // 12*16
#define SCE_SIZE_5393 608       // 38*16

struct tagFileHead
{
    UINT8 bID[TBL_FILE_ID_SIZE];
	UINT8 bNumOfSmartPic;
    UINT8 bChipID;
    UINT16 wNumOfGamma;
    UINT16 wSizeOfGammaTable;

    UINT16 wNumOfSCE;
    UINT16 wSizeOfSCETable;

    UINT16 wNumOfQty;
    UINT16 wSizeOfQtyTable;
    UINT8 bNumOfTiming;
    UINT8 bQtyXmlVer[FILE_HEAD_VER_SIZE];
    UINT8 bRes;
};

struct tagTblHead
{
    UINT8 bID[TBL_HEAD_ID_SIZE];
    UINT8 bScript[TBL_HEAD_SCRIPT_SIZE];
    UINT8 bDate[TBL_HEAD_DATE_SIZE];
	UINT8 bHash[TBL_HEAD_HASH];
};

enum RESERVED_BYTE
{
    RES_SUPPORT_QTY_TIMING_DESCRIPT = 0x01,	// [0]
    RES_SUPPORT_SAVE_QTY_HEADER		= 0x02, // [1]
    RES_SUPPORT_QTY_MAX_MIN			= 0x04, // [2]
    RES_SUPPORT_QTY_ITEM_ENDING		= 0x08,	// [3]
    RES_SUPPORT_QTY_HASH			= 0x10,	// [4]
    RES_20 = 0x20,              // [5]
    RES_40 = 0x40,              // [6]
    RES_80 = 0x80,              // [7]
};

enum FLASHPQ_TYPE
{
    TYPE_PQ_HEADER = 0,
    TYPE_GAMMA_HEADER,
    TYPE_GAMMA_CONTENT,
    TYPE_SCE_HEADER,
    TYPE_SCE_CONTENT,
    TYPE_QTY_HEADER,
    TYPE_QTY_DESCRIPT,
    TYPE_QTY_CONTENT,
    TYPE_QTY_CONTENT_MIN,
    TYPE_QTY_CONTENT_MAX,
    TYPE_QTY_ITEM,
    TYPE_FILE_END
};

enum FLASHPQ_VER
{
    FLASHPQ_XML_VER,
    FLASHPQ_GAMMA_VER,
    FLASHPQ_SCE_VER,
    FLASHPQ_QTY_VER
};


/** Brief of VDP_CONF_T
 *  min, max, default values of UI video quality item.
 */
typedef struct _PE_UI_VQ_MIN_MAX_DFT_T
{
    INT32 i4Min;
    INT32 i4Max;
    INT32 i4Dft;
} PE_UI_VQ_MIN_MAX_DFT_T;

typedef enum _PE_UI_VIDEO_QUALITY_ITEM_T
{
    EVDP_UVQI_BRIGHTNESS = 0,
    EVDP_UVQI_CONTRAST,
    EVDP_UVQI_HUE,
    EVDP_UVQI_SATURATION,
    EVDP_UVQI_CTI,
    EVDP_UVQI_SHARPNESS,
    EVDP_UVQI_LTI,
    EVDP_UVQI_COLOR_GAIN,
    EVDP_UVQI_COLOR_OFFSET,
    EVDP_UVQI_COLOR_SUPPRESS,
    EVDP_UVQI_NR,
    EVDP_UVQI_GAMMA,
    EVDP_UVQI_WHITE_PEAK_LMT,
    EVDP_UVQI_FLESH_TONE,       // SCE: second color enhance
    EVDP_UVQI_LUMA,             // adaptive luma
    EVDP_UVQI_BACK_LIGHT_LVL,
    EVDP_UVQI_ADAPTIVE_BACK_LIGHT,
    EVDP_UVQI_3D_NR,
    EVDP_UVQI_DEMO,

    // NEW UI
    EVDP_UVQI_DI_FILM_MODE,
    EVDP_UVQI_DI_MA,
    EVDP_UVQI_DI_EDGE_PRESERVE,
    EVDP_UVQI_MJC_MODE,
    EVDP_UVQI_MJC_EFFECT,
    EVDP_UVQI_MJC_DEMO,
    EVDP_UVQI_XVYCC,
    EVDP_UVQI_WCG,
    EVDP_UVQI_GAME_MODE,
    EVDP_UVQI_BLUE_STRETCH,
    EVDP_UVQI_MPEG_NR,

    EVDP_UVQI_BLACK_STRETCH,
    EVDP_UVQI_WHITE_STRETCH,
    
#if SUPPORT_SIX_COLOR_MANAGE  
	EVDP_UVQI_SIX_COLOR,	   
#endif
		

    EVDP_UVQI_MAX
} PE_UI_VIDEO_QUALITY_ITEM_T;

// Video plane argument.
typedef enum
{
    PE_ARG_BLENDING = 0,           ///< blending
    PE_ARG_BRIGHTNESS,             ///< brightness
    PE_ARG_CONTRAST,               ///< contrast
    PE_ARG_HUE,                    ///< hue
    PE_ARG_SATURATION,             ///< saturation
    PE_ARG_CTI,                    ///< CTI
    PE_ARG_LTI,                    ///< LTI
    PE_ARG_SHARPNESS_ON_OFF,       ///< sharpness switch
    PE_ARG_SHARPNESS,              ///< sharpness
    PE_ARG_NR,                     ///< 2D noise reduction
    PE_ARG_3D_NR,                  ///< 3D noise reduction
    PE_ARG_MPEG_NR,
    PE_ARG_ADAPTIVE_LUMA,          ///< adaptive luma
    PE_ARG_COLOR_SUPPRESS,         ///< color suppress
    PE_ARG_SCE,                    ///< second color enhance
    PE_ARG_WHITE_PEAK_LMT,         ///< white peak limit
    PE_ARG_BACK_LIGHT_LVL,         ///< back light level
    PE_ARG_ADAPTIVE_BACK_LIGHT,    ///< adaptive back light
    PE_ARG_SOFT_BWS,
    PE_ARG_CDS,

    PE_ARG_XVYCC,
    PE_ARG_WCG,
    PE_ARG_BLUE_STRETCH,
    PE_ARG_R_GAIN,                 ///< R-gain
    PE_ARG_G_GAIN,                 ///< G-gain
    PE_ARG_B_GAIN,                 ///< B-gain
    PE_ARG_R_OFFSET,               ///< R-offset
    PE_ARG_G_OFFSET,               ///< G-offset
    PE_ARG_B_OFFSET,               ///< B-offset
    PE_ARG_GAMMA,                  ///< Gamma
    PE_ARG_DEMO,                   ///< Demo mode

    // New UI
    PE_ARG_DI_FILM_MODE,
    PE_ARG_DI_MA,
    PE_ARG_DI_EDGE_PRESERVE,
    PE_ARG_MJC_MODE,
    PE_ARG_MJC_EFFECT,
    PE_ARG_MJC_DEMO,
    PE_ARG_GAME_MODE,

    PE_ARG_BLACK_STRETCH,
    PE_ARG_WHITE_STRETCH,

    PE_ARG_OPC_CURVE,              ///< OPC Curve, P1, P2, G1, G2, G_SLOPE
    
#if SUPPORT_SIX_COLOR_MANAGE 
	PE_ARG_SIX_COLOR,		  
#endif

    PE_ARG_NS                      ///< total color items
} PE_ARG_TYPE;

#if SUPPORT_SIX_COLOR_MANAGE  
enum
{
	BASE_COLOR_RED,
	BASE_COLOR_GREEN,
	BASE_COLOR_BLUE,
	BASE_COLOR_YELLOW,
	BASE_COLOR_PINK,
	BASE_COLOR_CYAN,
	BASE_COLOR_MAX,		
};

enum
{
	COLOR_HUE,
	COLOR_SAT,
	COLOR_Y,
};

typedef struct STR_SIX_COLOR
{
	UINT8 bColor;
    UINT8 bHSY;
    INT16 u2Offset;
	UINT8 bPhaseBegin;
    UINT8 bPhaseEnd;
	
} STR_SIX_COLOR;


typedef struct STR_SIX_COLOR_RNG
{
    UINT8 bStartPhase;
    UINT8 bEndPhase;
    UINT8 bPartialYStartPhase;
    UINT8 bPartialYEndPhase;
} STR_SIX_COLOR_RNG;

UINT32 PE_SetSixColorArg(UCHAR ucVdpId, UINT8 bColor, UINT8 bHSYType, INT16 i2Value);
#endif

#ifdef DRV_SUPPORT_EXTMJC

#define MJC_CTRL_EFCT_OFF		0x00            // MJC 1W1R (bypass)
#define MJC_CTRL_EFCT_LOW		0x40
#define MJC_CTRL_EFCT_MID		0x80
#define MJC_CTRL_EFCT_HIGH		0xff
#define MJC_CTRL_EFCT_MSK		0xff

typedef enum
{
    VDP_ARG_MJC_EFFECT_OFF,
    VDP_ARG_MJC_EFFECT_LOW,
    VDP_ARG_MJC_EFFECT_MIDDLE,
    VDP_ARG_MJC_EFFECT_HIGH
} MJC_EFFECT_MODE;

EXTERN INT32 d_custom_extmjc_set_ui(UINT8  ui2_level,
                                          UINT8  ui2_mode,
                                          UINT8  ui2_demo,
                                          UINT8* pui1_msg_error);

#define vMJCSetDemoMode(A, B, C)        d_custom_extmjc_set_ui(A, B, C, NULL)

#endif

extern UINT8 bPEAtModeChgDone;

//-----------------------------------------------------------------------------
//function Declare
//-----------------------------------------------------------------------------
/**
 * 3D NR On/Off
 *
 * @param bOnOff SV_ON/SV_OFF
 * @return NONE
 * @retval void
 */
void vApiVideo3DNROnOff(UINT8 bOnOff);

/**
 * TIIR NR On/Off
 *
 * @param bOnOff SV_ON/SV_OFF
 * @return NONE
 * @retval void
 */
void vApiVideoNRTIIROnOff(UINT8 bOnOff);

/**
 * TIIR NR YC Select
 *
 * @param bOnOff SV_ON/SV_OFF
 * @return NONE
 * @retval void
 */
void vApiVideoSRMNRYCOnOff(UINT8 bYOnOff, UINT8 bCOnOff);

/**
 * 2D NR On/Off
 *
 * @param bOnOff SV_ON/SV_OFF
 * @return NONE
 * @retval void
 */
void vApiVideo2DNROnOff(UINT8 bOnOff);

/**
 * MPEG NR On/Off
 *
 * @param bOnOff SV_ON/SV_OFF
 * @return NONE
 * @retval void
 */
void vApiVideoMPEGNROnOff(UINT8 bOnOff);

/**
 * PE initialize
 *
 * @param NONE
 * @return NONE
 * @retval void
 */
void vApiVideoPeInit(void);

/**
 * @brief Set the default value for MDY_QTY_TBL.
 * @param u1QtyIndex
 * @param u1QtyItem QUALITY_xxx
 * @param u1Value default value
 */
UINT8 bApiSetQtyDft(UINT8 u1QtyIndex, UINT8 u1UiItem, UINT8 u1Value);

/**
 * @brief Set the default value for MDY_QTY_TBL table.
 */
UINT8 bApiSetQtyTblDft(void);

/**
 * @brief Mapping from UI_min, UI_max, UI_dft, UI_cur, HW_min, HW_max, HW_dft, to HW cur.
 * @param u1VidPath SV_VP_MAIN/SV_VP_PIP
 * @param u2QtyItem VDP_ARG_xxx
 * @param pi2Min, pi2Max, pi2Dft, pucCur: UI values.
 */
UINT16 bApiQtyMapping(UINT8 u1QtyIndex, UINT16 u2QtyItem,
                     INT16 const *pi2Min, INT16 const *pi2Max,
                     INT16 const *pi2Dft, INT16 const *pi2Cur);

/**
 * @brief Parse the bCustomQtyItem[] table.
 *
 */
UINT8 bApiParseCustomQtyItem(void);

/**
 * @brief Translate source type/timing index into customer defined index.
 * @param bSrcTypTmg SOURCE_TYPE_TIMING_RFTV ~ SOURCE_TYPE_TIMING_MAX
 *
 */
UINT8 bApiGetCustomSourceTypeTiming(UINT8 bSrcTypTmg);

/**
 * @brief Search the default value from DefaultQtyTbl or CustomQtyTbl.
 * @param wSearchIndex
 * @param bQtyIdx
 */
UINT8 bApiGetQtyDft(UINT16 wSearchItem, UINT8 bQtyIdx);

/**
 * @brief Search the min value from DefaultQtyTbl.
 * @param wSearchIndex
 */
UINT8 bApiGetQtyMin(UINT16 u2QtyItem);

/**
 * @brief Search the min value from DefaultQtyTbl.
 * @param wSearchIndex
 */
UINT8 bApiGetQtyMax(UINT16 u2QtyItem);

/**
 * @brief Register video process event, wait for apply to hardware in output v-sync.
 * @param bVdpArg VDP_ARG_xx
 * @param bPath <SV_VP_MAIN/SV_VP_PIP>
 * @param bOnOff <SV_ON/SV_OFF>
 */
void vApiRegisterVideoEvent(UINT8 bVdpArg, UINT8 bPath, UINT8 bOnOff);

/**
 * @brief Call corresponding video API in bRegisterList
 *
 */
void vApiApplyVideoEventOutputVSync(void);

/**
 * @brief Call corresponding video API in bRegisterList
 *
 */
void vApiApplyVideoEventInputVSync(UINT8 u1VidPath);

/**
 * @brief Get video delay from luma histogram to LVDS output.
 * @return delay frame number.
 */
UINT8 bApiGetVideoDelay(void);

/**
 * @brief Set Demo mode
 * @param bmode VDP_DEMO_ALL_OFF/VDP_DEMO_ALL_ON/VDP_DEMO_ON_LEFT/VDP_DEMO_ON_RIGHT/
 * @param u1SrcTypTmg source type and timing
 */
void vApiVideoDemoMode(UINT8 bmode, Region DemoRec, UINT8 bDEMOModules);

#ifdef SUPPORT_FLASH_PQ

UINT64 u8CalcFlashPqOffset(
    UINT16 nType,
    UINT16 nModel,
    UINT16 nSmartPic,
    UINT16 nSource,
    UINT16 nIdx);

int nCalcFlashPqQtyNumber(void);
BOOL fgCheckFlashPqQtyHash(void);

/**
 * @brief Verify if FlashPQ header is valid or not.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqVerifyHeader(void);

void vApiFlashPqReadFlash(UINT64 u8Offset, UINT32 u4MemPtr, UINT32 u4MemLen);

/**
 * @brief Get PQ version
 * @return SV_TRUE/SV_FALSE
 */
UINT8 * bApiFlashPqGetVersion(UINT8 bType);

/**
 * @brief Translate panel ID to Gamma ID.
 * @return panel table list
 */
UINT16 vApiFlashPqGetGammaId(UINT8 bPanelID);

/**
 * @brief Translate panel ID to SCE ID.
 * @return panel table list
 */
UINT16 vApiFlashPqGetSceId(UINT8 bPanelID);


/**
 * @brief Translate panel ID to Max SCE ID.
 * @return panel table list
 */
UINT16 vApiFlashPqGetMaxSceId(UINT8 bIndex);

/**
 * @brief Translate panel ID to Qty ID.
 * @return panel table list
 */
UINT16 vApiFlashPqGetQtyId(UINT8 bPanelID);

/**
 * @brief Translate panel ID to SmartPic ID.
 * @return panel table list
 */
void vApiFlashPqSetSmartPicId(UINT8 bIndex);

/**
 * @brief Translate panel ID to SmartPic ID.
 * @return panel table list
 */
UINT8 vApiFlashPqGetSmartPicId(UINT8 bIndex);

/**
 * @brief Update gamma table from flashPQ data.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqUpdateGamma(void);

/**
 * @brief Update sce table from flashPQ data.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqUpdateSCE(void);

/**
 * @brief Initialize qty table from flashPQ data.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqQtyDftInit(void);


/**
 * @brief Update qty table from flashPQ data.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqUpdateQtyDft(void);

/**
 * @brief Update min/max qty table from flashPQ data.
 * @return SV_TRUE/SV_FALSE
 */
UINT8 bApiFlashPqUpdateQtyMinMax(UINT8 u1VidPath);

#endif // #ifdef SUPPORT_FLASH_PQ

PE_UI_VIDEO_QUALITY_ITEM_T _VdpArgType2UiVqItem(UCHAR ucArgType);

UINT8 _VdpNptvVidInSrcType2VisType(UINT8 u1NptvSrcType);

UINT32 PE_GetUiVqItemMinMaxDftCur(UINT8 u1VidPath, UCHAR ucArgType,
                    INT16 *pi2Min, INT16 *pi2Max, INT16 *pi2Dft, INT16 *pi2Cur);

void PE_SetUiVqMinMaxDft(UINT8 u1VdpVisType, UINT8 u1UiVqItem,
                    PE_UI_VQ_MIN_MAX_DFT_T *prUiVqMinMaxDft);

void PE_SetAllUiVqItemDftValues(void);

void PE_SetUiMinMaxDft(void);

/**
 * VDP set video plane argument.
 *
 * @param ucVdpId specify the video plane id.
 * @param ucArg specify the color item
 * @param i2Value specify the value of the color item
 * @return VDP_SET_ERROR or VDP_SET_OK
 */
UINT32 PE_SetArg(UCHAR ucVdpId, UCHAR ucArg, INT16 i2Value);

/**
 * VDP query video plane argument.
 *
 * @param ucVdpId specify the video plane id.
 * @param ucArg
 * @param pi2Value
 * @return VDP_SET_ERROR or VDP_SET_OK.
 */
UINT32 PE_GetArg(UCHAR ucVdpId, UCHAR ucArg, INT16* pi2Value);

/**
 * @brief Interface between MW_if and NPTV api
 * @param u1VidPath SV_VP_MAIN/SV_VP_PIP
 * @param u1QtyItem VDP_ARG_xxx
 */
UINT8 bApiVideoProc(UINT8 u1VidPath, UINT8 u1UiItem);

/**
 * @brief Auto Backlight update
 * @param aBLight auto Backlight structure
 */
void DRVCUST_AutoBacklightUpdate(AUTO_BACKLIGHT_SETS_INFO_T *aBLight);

/**
 * @brief Clarity update
 * @param u1Value -5~+5
 */
void DRVCUST_ClarityUpdate(INT8 u1Value);

/**
 * @brief Set SCE flash PQ Index
 * @param bIndex off/low/middle/high
 */
void vApiFlashPqSetSceId(UINT8 bIndex);

/* @ Auto NR default Initial setting
 *      1: low
 *      2: Middle
 */
UINT8 DRVCUST_AutoNRDefSet(void);

/* @ Auto NR noise level implement
 * @ return noise level
 */
UINT8 DRVCUST_NoiseLevel(void);

void DRVCUST_UpdateBacklightState(UINT8 u1State, UINT16 u2Duty);
void DRVCUST_SetBacklightDuty(UINT16 u2Duty);
void DRVCUST_AutoColorTempUpdate(AUTO_COLORTEMP_SETS_INFO_T *aCTInfo);
void vApiFlashPqSetGammaId(UINT8 bIndex);
void DRVCUST_PANEL_GAMMA_REMAP(UINT32 u4GammaSel);
void DRVCUST_SET_GAMMA(void);
void DRVCUST_CalculateSCE(UINT8 bSceLumaGain, UINT8 bSceSatGain, UINT8 bSceHueGain);
void vApiFlashPqSetSmartPicId(UINT8 bIndex);
void DRVCUST_AdaptiveBacklightMode(UINT8 bMode);
void DRVCUST_AdaptiveBacklightParam(UINT8 bMode);
UINT8 bApiGetPeUiDebugMode(void);
void vApiSetPeUiDebugMode(UINT8 bOnOff);

// Gamma Delta Customized Prototype
UINT16 DRVCUST_GetGammaVal(UINT8 bMode, UINT16 wLevel);
UINT16 DRVCUST_GetCompGammaVal(UINT8 bMode, UINT16 wLevel);
void DRVCUST_SetGammaDelta(UINT8 bMode, INT8 iDelta1, INT8 iDelta2, INT8 iDelta3, INT8 iDelta4);
void DRVCUST_SetGammaLevel(UINT16 wP1, UINT16 wP2, UINT16 wP3, UINT16 wP4);

#endif /* _PE_IF_H_ */


