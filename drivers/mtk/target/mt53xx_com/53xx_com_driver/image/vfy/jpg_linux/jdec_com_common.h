/********************************************************************************************
 *     LEGAL DISCLAIMER 
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES 
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED 
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS 
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED, 
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY 
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, 
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK 
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION 
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *     
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH 
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, 
 *     TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE 
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
 *     
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS 
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.  
 ************************************************************************************************/

#ifndef __JDEC_COM_COMMON_H
#define __JDEC_COM_COMMON_H
#define MT8520 1

#ifdef MT8520
#include "x_common.h"
#include "x_os.h"
#include "x_assert.h"
#include "x_printf.h"
#else
#include "x_typedef.h"
#endif

typedef enum _ENUM_JPEG_RET_CODE_T
{
	E_JPG_OK                    = 0,
	E_JPG_ERR_NONFATAL          = 1,
	E_JPG_ERR_FATAL             = 2,
	E_JPG_ERR_PARAM             = 3,
	E_JPG_ERR_NOT_INITED        = 4,
	E_JPG_ERR_ALREADY           = 5,
	/* markers */
	E_JPG_ERR_NOT_JPEG_IMAGE    = 10,
	E_JPG_ERR_NOT_A_MARKER      = 11,
	E_JPG_ERR_PASS_END          = 12,
	E_JPG_ERR_MULTI_SOI         = 13,
	E_JPG_ERR_UNSUPPORT_SOF     = 14,
	E_JPG_ERR_MULTI_SOF         = 15,
	E_JPG_ERR_INVALID_SOF       = 16,
	E_JPG_ERR_SOS_BEFORE_SOF    = 17,
	E_JPG_ERR_INVALID_SOS       = 18,
	E_JPG_ERR_INVALID_DHT       = 19,
	E_JPG_ERR_INVALID_DRI       = 20,
	E_JPG_ERR_MULTI_APP1        = 21,
	E_JPG_ERR_INVALID_APP0      = 22,
	E_JPG_ERR_INVALID_APP1      = 23,
	E_JPG_ERR_PARSE_FAILED      = 24,
	E_JPG_ERR_NOT_PARSED        = 25,
	E_JPG_ERR_MULTI_EOI         = 26,
	/* instances */
	E_JPG_ERR_ALLOC_PARSER      = 40,
	E_JPG_ERR_ALLOC_DECODER     = 41,
	E_JPG_ERR_ALLOC_MEM         = 42,
	E_JPG_ERR_ALLOC_FLOW        = 43,
	/* general */
	E_JPG_ERR_UNSUPPORT         = 50,
	E_JPG_ERR_GENERAL           = 51,
	E_JPG_ERR_NO_DATA           = 52,
	E_JPG_ERR_IO_ERROR          = 53,
	E_JPG_ERR_NO_MEMO           = 54, // Add by pingzhao for allocate memory fail
	/* decode result */
	E_JPG_ERR_DEC_ERROR         = 60,
	E_JPG_ERR_HAL_GET_RD        = 61,
	E_JPG_ERR_HAL_UPT_RD        = 62,
	E_JPG_ERR_SCALE_ERROR       = 63,
	E_JPG_ERR_NO_NEXT_MARKER    = 64,
	E_JPG_ERR_MARKER_EARLY      = 65,
	/* data ststus */
	E_JPG_ERR_SKIP_DATA         = 70,
	E_JPG_GET_CLRBUFMEM_FAIL    = 71,
	E_JPG_GET_FIFO_MEM_FAIL     = 72,
    E_JPG_GET_NO_HW_FAIL        = 73,
    
	/* SW error typr */
	E_JPG_SW_PARSER_FAIL        = 74,
	E_JPG_SW_UNSUPPORT_SIZE     = 75,
	/* error code max */
	E_JPG_ERR_LAST              = 100,

} ENUIM_JPEG_RET_CODE_T;


typedef enum _ENUM_HWJPG_RET_CODE
{
	E_HWJPG_OK = 0,
	E_HWJPG_BUSY,

	E_HWJPG_ERR_FETCH_TIMEOIT = E_JPG_ERR_LAST + 1,
	E_HWJPG_ERR_SET_BS,
	E_HWJPG_ERR_LOAD_Q,
	E_HWJPG_ERR_QTBL_INDEX,
	E_HWJPG_ERR_QTBL_NUM,

	E_HWJPG_ERR_PARAM,
	E_HWJPG_ERR_TIMEOUT,

	E_HWJPG_ERR_COMP_RANGE,
	E_HWJPG_ERR_TBL_RANGE,
	E_HWJPG_ERR_BLOCK,
	E_HWJPG_ERR_SIZE,
	E_HWJPG_ERR_OUTBUF,

	E_HWJPG_ERR_NULL_SCAN,

	E_HWJPG_ERR_GLOB_NOT_READY,
	E_HWJPG_ERR_SCAN_NOT_READY,
	E_HWJPG_ERR_ROW_NOT_READY,
	E_HWJPG_ERR_MCU_NOT_READY,
	E_HWJPG_ERR_MISC_NOT_READY,
	E_HWJPG_ERR_HUFF_ADDR,
	/* last */
	E_HWJPG_ERR_GENERAL
} ENUM_HWJPG_RET_CODE;


#define D_BIT(X)			(1 << (X))
#define ALIGN_MASK(BIT)		(((UINT32)(BIT) >> 3) - 1)


#endif //__JDEC_COM_COMMON_H
