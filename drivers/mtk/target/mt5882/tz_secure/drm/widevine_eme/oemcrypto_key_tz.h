/*******************************************************************************
 *
 * Copyright 2013 Google Inc. All Rights Reserved.
 *
 * mock implementation of OEMCrypto APIs
 *
 ******************************************************************************/

#ifndef OEMCRYPTO_KEY_TZ_H_
#define OEMCRYPTO_KEY_TZ_H_

#include "svc_wv_if.h"


const static uint32_t kControlObserveDataPath = (1<<31);
const static uint32_t kControlObserveHDCP     = (1<<30);
const static uint32_t kControlObserveCGMS     = (1<<29);
const static uint32_t kControlAllowEncrypt    = (1<<8);
const static uint32_t kControlAllowDecrypt    = (1<<7);
const static uint32_t kControlAllowSign       = (1<<6);
const static uint32_t kControlAllowVerify     = (1<<5);
const static uint32_t kControlDataPathSecure  = (1<<4);
const static uint32_t kControlNonceEnabled    = (1<<3);
const static uint32_t kControlHDCPRequired    = (1<<2);
const static uint32_t kControlCGMSMask        = (0x03);
const static uint32_t kControlCGMSCopyFreely  = (0x00);
const static uint32_t kControlCGMSCopyOnce    = (0x02);
const static uint32_t kControlCGMSCopyNever   = (0x03);



bool Validate(  KeyControlBlock* conbk);
uint32_t ExtractField( KeyControlBlock * conbk,const uint8_t* str, int stlen, int idx);

bool SetFromString( KeyControlBlock * conbk, const uint8_t * key_control_string, int keyconlen);



// AES-128 crypto key
typedef struct 
{
    bool    valid_;
     KeyType type_;
    KeyData keyvalue_;
    int     keydatalen_;
    bool    has_control_;
    KeyControlBlock control_;
} WvKey;

typedef uint8_t WvKeyboxKey[DEVICE_KEY_LENGTH];
typedef uint8_t WvKeyboxKeyData[KEY_DATA_LENGTH];
typedef uint8_t T_DEVICE_ID [DEVICE_ID_LENGTH];

// Widevine keybox
typedef struct 
{
    bool valid_;
    T_DEVICE_ID device_id_;
     WvKey device_key_;
    WvKeyboxKeyData key_data_;
    uint8_t magic_[4];
    uint8_t crc_[4];
} WvKeybox;

// This is the format of a Widevine keybox.
typedef struct     // 128 bytes total.
{
    // C character string identifying the device.  Null terminated.
    uint8_t device_id_[32];
    // 128 bit AES key assigned to device.  Generated by Widevine.
    uint8_t device_key_[16];
    // WvKey Data.  Encrypted data.
    uint8_t data_[72];
    // Constant code used to recognize a valid keybox "kbox" = 0x6b626f78.
    uint8_t magic_[4];
    // The CRC checksum of the first 124 bytes of the keybox.
    uint8_t crc_[4];
} WidevineKeybox;


// WvKey is valid iff setValue(), setType(), and setControl() have been called
bool setValue( WvKey * tmpkey, const char* key_string, size_t key_string_length);
bool setType( WvKey * tmpkey, KeyType ktype);
bool setControl( WvKey * tmpkey,const  KeyControlBlock* control);
bool UpdateDurationKey( WvKey * tmpkey,const  KeyControlBlock* control);

KeyType keyType(WvKey * tmpkey);

const uint8_t* value( WvKey * tmpkey);

const KeyControlBlock* control( WvKey * tmpkey);

bool isDeviceKey( WvKey * tmpkey);

bool isRootKey( WvKey * tmpkey);

bool isPreprovKey( WvKey * tmpkey);

bool isContentKey( WvKey * tmpkey);

bool isValidType( WvKey * tmpkey);

bool isValid( WvKey * tmpkey);

void clear( WvKey * tmpkey);




#endif
